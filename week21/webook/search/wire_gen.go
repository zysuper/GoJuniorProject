// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gitee.com/geekbang/basic-go/webook/search/events"
	"gitee.com/geekbang/basic-go/webook/search/grpc"
	"gitee.com/geekbang/basic-go/webook/search/ioc"
	"gitee.com/geekbang/basic-go/webook/search/repository"
	"gitee.com/geekbang/basic-go/webook/search/repository/dao"
	"gitee.com/geekbang/basic-go/webook/search/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Init() *App {
	client := ioc.InitESClient()
	anyDAO := dao.NewAnyESDAO(client)
	anyRepository := repository.NewAnyRepository(anyDAO)
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagESDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	syncService := service.NewSyncService(anyRepository, userRepository, articleRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchService(searchService)
	clientv3Client := ioc.InitEtcdClient()
	loggerV1 := ioc.InitLogger()
	server := ioc.InitGRPCxServer(syncServiceServer, searchServiceServer, clientv3Client, loggerV1)
	saramaClient := ioc.InitKafka()
	articleConsumer := events.NewArticleConsumer(saramaClient, loggerV1, syncService)
	userConsumer := events.NewUserConsumer(saramaClient, loggerV1, syncService)
	v := ioc.NewConsumers(articleConsumer, userConsumer)
	app := &App{
		server:    server,
		consumers: v,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewUserElasticDAO, dao.NewArticleElasticDAO, dao.NewAnyESDAO, dao.NewTagESDAO, repository.NewUserRepository, repository.NewArticleRepository, repository.NewAnyRepository, service.NewSyncService, service.NewSearchService)

var thirdProvider = wire.NewSet(ioc.InitESClient, ioc.InitEtcdClient, ioc.InitLogger, ioc.InitKafka)
