// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gitee.com/geekbang/basic-go/webook/feed/events"
	"gitee.com/geekbang/basic-go/webook/feed/grpc"
	"gitee.com/geekbang/basic-go/webook/feed/ioc"
	"gitee.com/geekbang/basic-go/webook/feed/repository"
	"gitee.com/geekbang/basic-go/webook/feed/repository/cache"
	"gitee.com/geekbang/basic-go/webook/feed/repository/dao"
	"gitee.com/geekbang/basic-go/webook/feed/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	client := ioc.InitEtcdClient()
	db := ioc.InitDB(loggerV1)
	feedPullEventDAO := dao.NewFeedPullEventDAO(db)
	feedPushEventDAO := dao.NewFeedPushEventDAO(db)
	cmdable := ioc.InitRedis()
	feedEventCache := cache.NewFeedEventCache(cmdable)
	feedEventRepo := repository.NewFeedEventRepo(feedPullEventDAO, feedPushEventDAO, feedEventCache)
	followServiceClient := ioc.InitFollowClient()
	v := ioc.RegisterHandler(feedEventRepo, followServiceClient)
	feedService := service.NewFeedService(feedEventRepo, v)
	feedEventGrpcSvc := grpc.NewFeedEventGrpcSvc(feedService)
	server := ioc.InitGRPCxServer(loggerV1, client, feedEventGrpcSvc)
	saramaClient := ioc.InitKafka()
	articleEventConsumer := events.NewArticleEventConsumer(saramaClient, loggerV1, feedService)
	feedEventConsumer := events.NewFeedEventConsumer(saramaClient, loggerV1, feedService)
	v2 := ioc.NewConsumers(articleEventConsumer, feedEventConsumer)
	app := &App{
		server:    server,
		consumers: v2,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewFeedPushEventDAO, dao.NewFeedPullEventDAO, cache.NewFeedEventCache, repository.NewFeedEventRepo)

var thirdProvider = wire.NewSet(ioc.InitEtcdClient, ioc.InitLogger, ioc.InitRedis, ioc.InitKafka, ioc.InitDB, ioc.InitFollowClient)
