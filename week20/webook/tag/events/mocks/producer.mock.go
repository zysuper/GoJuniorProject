// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go
//
// Generated by this command:
//
//	mockgen -source=./producer.go -package=evtmocks -destination=mocks/producer.mock.go Producer
//
// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	reflect "reflect"

	events "gitee.com/geekbang/basic-go/webook/tag/events"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// ProduceSyncEvent mocks base method.
func (m *MockProducer) ProduceSyncEvent(ctx context.Context, data events.BizTags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceSyncEvent", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceSyncEvent indicates an expected call of ProduceSyncEvent.
func (mr *MockProducerMockRecorder) ProduceSyncEvent(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceSyncEvent", reflect.TypeOf((*MockProducer)(nil).ProduceSyncEvent), ctx, data)
}
