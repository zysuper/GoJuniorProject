// Code generated by MockGen. DO NOT EDIT.
// Source: ./webook/internal/repository/dao/msg.go
//
// Generated by this command:
//
//	mockgen -source=./webook/internal/repository/dao/msg.go -package=daomocks -destination=./webook/internal/repository/dao/mocks/msg.mock.go
//
// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "gitee.com/geekbang/basic-go/webook/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockMsgDAO is a mock of MsgDAO interface.
type MockMsgDAO struct {
	ctrl     *gomock.Controller
	recorder *MockMsgDAOMockRecorder
}

// MockMsgDAOMockRecorder is the mock recorder for MockMsgDAO.
type MockMsgDAOMockRecorder struct {
	mock *MockMsgDAO
}

// NewMockMsgDAO creates a new mock instance.
func NewMockMsgDAO(ctrl *gomock.Controller) *MockMsgDAO {
	mock := &MockMsgDAO{ctrl: ctrl}
	mock.recorder = &MockMsgDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgDAO) EXPECT() *MockMsgDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMsgDAO) Create(ctx context.Context, msg dao.Msg) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, msg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMsgDAOMockRecorder) Create(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMsgDAO)(nil).Create), ctx, msg)
}

// FindById mocks base method.
func (m *MockMsgDAO) FindById(ctx context.Context, uid int64) (dao.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, uid)
	ret0, _ := ret[0].(dao.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMsgDAOMockRecorder) FindById(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMsgDAO)(nil).FindById), ctx, uid)
}
