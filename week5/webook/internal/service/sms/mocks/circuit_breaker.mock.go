// Code generated by MockGen. DO NOT EDIT.
// Source: ./webook/internal/service/sms/circuit_breaker/types.go
//
// Generated by this command:
//
//	mockgen -source=./webook/internal/service/sms/circuit_breaker/types.go -package=smsmocks -destination=./webook/internal/service/sms/mocks/circuit_breaker.mock.go
//
// Package smsmocks is a generated GoMock package.
package smsmocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCircuitBreaker is a mock of CircuitBreaker interface.
type MockCircuitBreaker struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerMockRecorder
}

// MockCircuitBreakerMockRecorder is the mock recorder for MockCircuitBreaker.
type MockCircuitBreakerMockRecorder struct {
	mock *MockCircuitBreaker
}

// NewMockCircuitBreaker creates a new mock instance.
func NewMockCircuitBreaker(ctrl *gomock.Controller) *MockCircuitBreaker {
	mock := &MockCircuitBreaker{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitBreaker) EXPECT() *MockCircuitBreakerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockCircuitBreaker) Do(args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockCircuitBreakerMockRecorder) Do(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCircuitBreaker)(nil).Do), args...)
}
