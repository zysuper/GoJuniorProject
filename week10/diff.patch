diff --git a/go.mod b/go.mod
index 7097d48..7969e7f 100644
--- a/go.mod
+++ b/go.mod
@@ -4,6 +4,7 @@ go 1.20
 
 require (
 	github.com/DATA-DOG/go-sqlmock v1.5.0
+	github.com/IBM/sarama v1.42.1
 	github.com/aws/aws-sdk-go v1.47.2
 	github.com/bwmarrin/snowflake v0.3.0
 	github.com/dlclark/regexp2 v1.10.0
@@ -16,7 +17,9 @@ require (
 	github.com/golang-jwt/jwt/v5 v5.0.0
 	github.com/google/uuid v1.3.1
 	github.com/google/wire v0.5.0
+	github.com/hashicorp/golang-lru v0.5.4
 	github.com/lithammer/shortuuid/v4 v4.0.0
+	github.com/prometheus/client_golang v1.17.0
 	github.com/redis/go-redis/v9 v9.2.1
 	github.com/spf13/pflag v1.0.5
 	github.com/spf13/viper v1.17.0
@@ -24,12 +27,20 @@ require (
 	github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common v1.0.767
 	github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/sms v1.0.767
 	go.mongodb.org/mongo-driver v1.9.0
+	go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin v0.46.1
+	go.opentelemetry.io/otel v1.21.0
+	go.opentelemetry.io/otel/exporters/zipkin v1.21.0
+	go.opentelemetry.io/otel/sdk v1.21.0
 	go.uber.org/mock v0.3.0
 	go.uber.org/zap v1.21.0
-	golang.org/x/crypto v0.14.0
+	golang.org/x/crypto v0.15.0
+	golang.org/x/net v0.18.0
+	golang.org/x/sync v0.4.0
 	gorm.io/driver/mysql v1.5.2
 	gorm.io/driver/sqlite v1.5.4
 	gorm.io/gorm v1.25.5
+	gorm.io/plugin/opentelemetry v0.1.4
+	gorm.io/plugin/prometheus v0.0.0-20231026031148-436184e80556
 )
 
 require (
@@ -39,6 +50,7 @@ require (
 	cloud.google.com/go/firestore v1.13.0 // indirect
 	cloud.google.com/go/longrunning v0.5.1 // indirect
 	github.com/armon/go-metrics v0.4.1 // indirect
+	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/bytedance/sonic v1.9.1 // indirect
 	github.com/cespare/xxhash/v2 v2.2.0 // indirect
 	github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect
@@ -46,9 +58,14 @@ require (
 	github.com/coreos/go-systemd/v22 v22.3.2 // indirect
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
 	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
+	github.com/eapache/go-resiliency v1.4.0 // indirect
+	github.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3 // indirect
+	github.com/eapache/queue v1.1.0 // indirect
 	github.com/fatih/color v1.14.1 // indirect
 	github.com/gabriel-vasile/mimetype v1.4.2 // indirect
 	github.com/gin-contrib/sse v0.1.0 // indirect
+	github.com/go-logr/logr v1.3.0 // indirect
+	github.com/go-logr/stdr v1.2.2 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
 	github.com/go-playground/validator/v10 v10.14.0 // indirect
@@ -58,22 +75,28 @@ require (
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
 	github.com/golang/protobuf v1.5.3 // indirect
 	github.com/golang/snappy v0.0.4 // indirect
-	github.com/google/go-cmp v0.5.9 // indirect
+	github.com/google/go-cmp v0.6.0 // indirect
 	github.com/google/s2a-go v0.1.7 // indirect
-	github.com/google/subcommands v1.0.1 // indirect
 	github.com/googleapis/enterprise-certificate-proxy v0.3.1 // indirect
 	github.com/googleapis/gax-go/v2 v2.12.0 // indirect
 	github.com/gorilla/context v1.1.1 // indirect
 	github.com/gorilla/securecookie v1.1.1 // indirect
 	github.com/gorilla/sessions v1.2.1 // indirect
 	github.com/hashicorp/consul/api v1.25.1 // indirect
+	github.com/hashicorp/errwrap v1.1.0 // indirect
 	github.com/hashicorp/go-cleanhttp v0.5.2 // indirect
 	github.com/hashicorp/go-hclog v1.5.0 // indirect
 	github.com/hashicorp/go-immutable-radix v1.3.1 // indirect
+	github.com/hashicorp/go-multierror v1.1.1 // indirect
 	github.com/hashicorp/go-rootcerts v1.0.2 // indirect
-	github.com/hashicorp/golang-lru v0.5.4 // indirect
+	github.com/hashicorp/go-uuid v1.0.3 // indirect
 	github.com/hashicorp/hcl v1.0.0 // indirect
 	github.com/hashicorp/serf v0.10.1 // indirect
+	github.com/jcmturner/aescts/v2 v2.0.0 // indirect
+	github.com/jcmturner/dnsutils/v2 v2.0.0 // indirect
+	github.com/jcmturner/gofork v1.7.6 // indirect
+	github.com/jcmturner/gokrb5/v8 v8.4.4 // indirect
+	github.com/jcmturner/rpc/v2 v2.0.3 // indirect
 	github.com/jinzhu/inflection v1.0.0 // indirect
 	github.com/jinzhu/now v1.1.5 // indirect
 	github.com/jmespath/go-jmespath v0.4.0 // indirect
@@ -85,6 +108,7 @@ require (
 	github.com/mattn/go-colorable v0.1.13 // indirect
 	github.com/mattn/go-isatty v0.0.19 // indirect
 	github.com/mattn/go-sqlite3 v2.0.3+incompatible // indirect
+	github.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect
 	github.com/mitchellh/go-homedir v1.1.0 // indirect
 	github.com/mitchellh/mapstructure v1.5.0 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
@@ -92,9 +116,15 @@ require (
 	github.com/nats-io/nats.go v1.30.2 // indirect
 	github.com/nats-io/nkeys v0.4.5 // indirect
 	github.com/nats-io/nuid v1.0.1 // indirect
+	github.com/openzipkin/zipkin-go v0.4.2 // indirect
 	github.com/pelletier/go-toml/v2 v2.1.0 // indirect
+	github.com/pierrec/lz4/v4 v4.1.18 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
+	github.com/prometheus/client_model v0.4.1-0.20230718164431-9a2bf3000d16 // indirect
+	github.com/prometheus/common v0.44.0 // indirect
+	github.com/prometheus/procfs v0.11.1 // indirect
+	github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
 	github.com/sagikazarmark/crypt v0.15.0 // indirect
 	github.com/sagikazarmark/locafero v0.3.0 // indirect
 	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
@@ -105,26 +135,24 @@ require (
 	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
 	github.com/ugorji/go/codec v1.2.11 // indirect
 	github.com/xdg-go/pbkdf2 v1.0.0 // indirect
-	github.com/xdg-go/scram v1.0.2 // indirect
-	github.com/xdg-go/stringprep v1.0.2 // indirect
+	github.com/xdg-go/scram v1.1.2 // indirect
+	github.com/xdg-go/stringprep v1.0.4 // indirect
 	github.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d // indirect
 	go.etcd.io/etcd/api/v3 v3.5.9 // indirect
 	go.etcd.io/etcd/client/pkg/v3 v3.5.9 // indirect
 	go.etcd.io/etcd/client/v2 v2.305.9 // indirect
 	go.etcd.io/etcd/client/v3 v3.5.9 // indirect
 	go.opencensus.io v0.24.0 // indirect
+	go.opentelemetry.io/otel/metric v1.21.0 // indirect
+	go.opentelemetry.io/otel/trace v1.21.0 // indirect
 	go.uber.org/atomic v1.9.0 // indirect
-	go.uber.org/multierr v1.9.0 // indirect
+	go.uber.org/multierr v1.11.0 // indirect
 	golang.org/x/arch v0.3.0 // indirect
 	golang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect
-	golang.org/x/mod v0.12.0 // indirect
-	golang.org/x/net v0.17.0 // indirect
 	golang.org/x/oauth2 v0.12.0 // indirect
-	golang.org/x/sync v0.3.0 // indirect
-	golang.org/x/sys v0.13.0 // indirect
-	golang.org/x/text v0.13.0 // indirect
+	golang.org/x/sys v0.14.0 // indirect
+	golang.org/x/text v0.14.0 // indirect
 	golang.org/x/time v0.3.0 // indirect
-	golang.org/x/tools v0.13.0 // indirect
 	golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2 // indirect
 	google.golang.org/api v0.143.0 // indirect
 	google.golang.org/appengine v1.6.7 // indirect
diff --git a/go.sum b/go.sum
index 56c1603..faf671b 100644
--- a/go.sum
+++ b/go.sum
@@ -27,6 +27,7 @@ cloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4g
 cloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=
 cloud.google.com/go/compute v1.23.0 h1:tP41Zoavr8ptEqaW6j+LQOnyBBhO7OkOMAGrgLopTwY=
 cloud.google.com/go/compute v1.23.0/go.mod h1:4tCnrn48xsqlwSAiLf1HXMQk8CONslYbdiEZc9FEIbM=
+cloud.google.com/go/compute/metadata v0.2.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=
 cloud.google.com/go/compute/metadata v0.2.3 h1:mg4jlk7mCAj6xXp9UJ4fjI9VUI5rubuGBW5aJ7UnBMY=
 cloud.google.com/go/compute/metadata v0.2.3/go.mod h1:VAV5nSsACxMJvgaAuX6Pk2AawlZn8kiOGuCv6gTkwuA=
 cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=
@@ -51,10 +52,16 @@ github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym
 github.com/DATA-DOG/go-sqlmock v1.5.0 h1:Shsta01QNfFxHCfpW6YH2STWB0MudeXXEWMr20OEh60=
 github.com/DATA-DOG/go-sqlmock v1.5.0/go.mod h1:f/Ixk793poVmq4qj/V1dPUg2JEAKC73Q5eFN3EC/SaM=
 github.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=
+github.com/IBM/sarama v1.42.1 h1:wugyWa15TDEHh2kvq2gAy1IHLjEjuYOYgXz/ruC/OSQ=
+github.com/IBM/sarama v1.42.1/go.mod h1:Xxho9HkHd4K/MDUo/T/sOqwtX/17D33++E9Wib6hUdQ=
+github.com/alecthomas/kingpin/v2 v2.3.1/go.mod h1:oYL5vtsvEHZGHxU7DMp32Dvx+qL+ptGn6lWaot2vCNE=
+github.com/alecthomas/kingpin/v2 v2.3.2/go.mod h1:0gyi0zQnjuFk8xrkNKamJoyUo382HRL7ATRpFZCw6tE=
 github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
 github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
+github.com/alecthomas/units v0.0.0-20190924025748-f65c72e2690d/go.mod h1:rBZYJk541a8SKzHPHnH3zbiI+7dagKZ0cgpgrD7Fyho=
+github.com/alecthomas/units v0.0.0-20211218093645-b94a6e3cc137/go.mod h1:OMCwj8VM1Kc9e19TLln2VL61YJF0x1XFtfdL4JdbSyE=
 github.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=
 github.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=
 github.com/armon/go-metrics v0.4.1 h1:hR91U9KYmb6bLBYLQjyM+3j+rcd/UhE+G78SFnF8gJA=
@@ -67,6 +74,7 @@ github.com/benbjohnson/clock v1.1.0 h1:Q92kusRqC1XV2MjkWETPvjJVqKetz1OzxZB7mHJLj
 github.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
 github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
+github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
 github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
 github.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=
@@ -78,6 +86,7 @@ github.com/bytedance/sonic v1.9.1 h1:6iJ6NqdoxCDr6mbY8h18oSO+cShGSMRGCEo7F2h0x8s
 github.com/bytedance/sonic v1.9.1/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
 github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
+github.com/cespare/xxhash/v2 v2.1.2/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=
 github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/chenzhuoyu/base64x v0.0.0-20211019084208-fb5309c8db06/go.mod h1:DH46F32mSOjUmXrMHnKwZdA8wcEefY7UVqBKYGjpdQY=
@@ -105,6 +114,12 @@ github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/r
 github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=
 github.com/dlclark/regexp2 v1.10.0 h1:+/GIL799phkJqYW+3YbOd8LCcbHzT0Pbo8zl70MHsq0=
 github.com/dlclark/regexp2 v1.10.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=
+github.com/eapache/go-resiliency v1.4.0 h1:3OK9bWpPk5q6pbFAaYSEwD9CLUSHG8bnZuqX2yMt3B0=
+github.com/eapache/go-resiliency v1.4.0/go.mod h1:5yPzW0MIvSe0JDsv0v+DvcjEv2FyD6iZYSs1ZI+iQho=
+github.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3 h1:Oy0F4ALJ04o5Qqpdz8XLIpNA3WM/iSIXqxtqo7UGVws=
+github.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3/go.mod h1:YvSRo5mw33fLEx1+DlK6L2VV43tJt5Eyel9n9XBcR+0=
+github.com/eapache/queue v1.1.0 h1:YOEu7KNc61ntiQlcEeUIoDTJ2o8mQznoNvUhiigpIqc=
+github.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=
 github.com/ecodeclub/ekit v0.0.8 h1:861Aot0GvD5ueREEYDVYc1oIhDuFyg6MTxIyiOa4Pvw=
 github.com/ecodeclub/ekit v0.0.8/go.mod h1:OqTojKeKFTxeeAAUwNIPKu339SRkX6KAuoK/8A5BCEs=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
@@ -118,6 +133,7 @@ github.com/fatih/color v1.9.0/go.mod h1:eQcE1qtQxscV5RaZvpXrrb8Drkc3/DdQ+uUYCNjL
 github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=
 github.com/fatih/color v1.14.1 h1:qfhVLaG5s+nCROl1zJsZRxFeYrHLqWroPOQ8BWiNb4w=
 github.com/fatih/color v1.14.1/go.mod h1:2oHN61fhTpgcxD3TSWCgKDiH1+x4OiDVVGH8WlgGZGg=
+github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
 github.com/frankban/quicktest v1.14.4 h1:g2rn0vABPOOXmZUj+vbmUp0lPoXEMuhTpIluN0XL9UY=
 github.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=
 github.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=
@@ -137,8 +153,18 @@ github.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2
 github.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
 github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
 github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
+github.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=
+github.com/go-kit/log v0.2.0/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=
+github.com/go-kit/log v0.2.1/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=
 github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
 github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
+github.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=
+github.com/go-logfmt/logfmt v0.5.1/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=
+github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
+github.com/go-logr/logr v1.3.0 h1:2y3SDp0ZXuc6/cjLSZ+Q3ir+QB9T/iG5yYRXqsagWSY=
+github.com/go-logr/logr v1.3.0/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
+github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
+github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
 github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
 github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
 github.com/go-playground/locales v0.14.0/go.mod h1:sawfccIbzZTqEDETgFXqTho0QybSa7l++s0DH+LDiLs=
@@ -192,6 +218,7 @@ github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QD
 github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
+github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
 github.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=
 github.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
 github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
@@ -211,8 +238,10 @@ github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/
 github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
+github.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
+github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
 github.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=
@@ -230,7 +259,6 @@ github.com/google/pprof v0.0.0-20201218002935-b9804c9f04c2/go.mod h1:kpwsk12EmLe
 github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
 github.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=
 github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=
-github.com/google/subcommands v1.0.1 h1:/eqq+otEXm5vhfBrbREPCSVQbvofip6kIz+mX5TUH7k=
 github.com/google/subcommands v1.0.1/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=
 github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
@@ -256,6 +284,7 @@ github.com/hashicorp/consul/api v1.25.1/go.mod h1:iiLVwR/htV7mas/sy0O+XSuEnrdBUU
 github.com/hashicorp/consul/sdk v0.14.1 h1:ZiwE2bKb+zro68sWzZ1SgHF3kRMBZ94TwOCFRF4ylPs=
 github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
 github.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=
+github.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
 github.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=
 github.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=
 github.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=
@@ -269,6 +298,7 @@ github.com/hashicorp/go-msgpack v0.5.5 h1:i9R9JSrqIz0QVLz3sz+i3YJdT7TTSLcfLLzJi9
 github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=
 github.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=
 github.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=
+github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=
 github.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=
 github.com/hashicorp/go-rootcerts v1.0.2 h1:jzhAVGtqPKbwpyCPELlgNWhE1znq+qwJtW5Oi2viEzc=
 github.com/hashicorp/go-rootcerts v1.0.2/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=
@@ -277,7 +307,9 @@ github.com/hashicorp/go-sockaddr v1.0.2 h1:ztczhD1jLxIRjVejw8gFomI1BQZOe2WoVOu0S
 github.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=
 github.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
 github.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
 github.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=
+github.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
 github.com/hashicorp/go-version v1.2.1 h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=
 github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
 github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
@@ -293,6 +325,18 @@ github.com/hashicorp/serf v0.10.1 h1:Z1H2J60yRKvfDYAOZLd2MU0ND4AH/WDz7xYHDWQsIPY
 github.com/hashicorp/serf v0.10.1/go.mod h1:yL2t6BqATOLGc5HF7qbFkTfXoPIY0WZdWHfEvMqbG+4=
 github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
 github.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
+github.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=
+github.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=
+github.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=
+github.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=
+github.com/jcmturner/gofork v1.7.6 h1:QH0l3hzAU1tfT3rZCnW5zXl+orbkNMMRGJfdJjHVETg=
+github.com/jcmturner/gofork v1.7.6/go.mod h1:1622LH6i/EZqLloHfE7IeZ0uEJwMSUyQ/nDd82IeqRo=
+github.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=
+github.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=
+github.com/jcmturner/gokrb5/v8 v8.4.4 h1:x1Sv4HaTpepFkXbt2IkL29DXRf8sOfZXo8eRKh687T8=
+github.com/jcmturner/gokrb5/v8 v8.4.4/go.mod h1:1btQEpgT6k+unzCwX1KdWMEwPPkkgBtP+F6aCACiMrs=
+github.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=
+github.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=
 github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
 github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
 github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
@@ -301,13 +345,17 @@ github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9Y
 github.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=
+github.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=
 github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
 github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.11/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
 github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=
 github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
+github.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=
 github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=
@@ -317,12 +365,14 @@ github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa02
 github.com/klauspost/cpuid/v2 v2.2.4 h1:acbojRNwl3o09bUq+yDCtZFc1aiwaAAxtcn8YkZXnvk=
 github.com/klauspost/cpuid/v2 v2.2.4/go.mod h1:RVVoqg1df56z8g3pUjL/3lE5UfnlrJX8tyFgg4nqhuY=
 github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
+github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
 github.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=
 github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
 github.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=
 github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
+github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
@@ -352,6 +402,8 @@ github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D
 github.com/mattn/go-sqlite3 v2.0.3+incompatible h1:gXHsfypPkaMZrKbD5209QV9jbUTJKjyR5WD3HYQSd+U=
 github.com/mattn/go-sqlite3 v2.0.3+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
+github.com/matttproud/golang_protobuf_extensions v1.0.4 h1:mmDVorXM7PCGKw94cs5zkfA9PSy5pEvNWRP0ET0TIVo=
+github.com/matttproud/golang_protobuf_extensions v1.0.4/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=
 github.com/miekg/dns v1.1.26/go.mod h1:bPDLeHnStXmXAq1m/Ch/hvfNHr14JKNPMBo3VZKjuso=
 github.com/miekg/dns v1.1.41 h1:WMszZWJG0XmzbK9FEmzH2TVcqYzFesusSIB41b8KHxY=
 github.com/miekg/dns v1.1.41/go.mod h1:p6aan82bvRIyn+zDIv9xYNUpwa73JcSh9BKwknJysuI=
@@ -371,6 +423,7 @@ github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9G
 github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
 github.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=
 github.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
+github.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
 github.com/nats-io/jwt/v2 v2.4.1 h1:Y35W1dgbbz2SQUYDPCaclXcuqleVmpbRa7646Jf2EX4=
 github.com/nats-io/nats-server/v2 v2.9.20 h1:bt1dW6xsL1hWWwv7Hovm+EJt5L6iplyqlgEFkoEUk0k=
 github.com/nats-io/nats.go v1.30.2 h1:aloM0TGpPorZKQhbAkdCzYDj+ZmsJDyeo3Gkbr72NuY=
@@ -379,12 +432,16 @@ github.com/nats-io/nkeys v0.4.5 h1:Zdz2BUlFm4fJlierwvGK+yl20IAKUm7eV6AAZXEhkPk=
 github.com/nats-io/nkeys v0.4.5/go.mod h1:XUkxdLPTufzlihbamfzQ7mw/VGx6ObUs+0bN5sNvt64=
 github.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=
 github.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=
+github.com/openzipkin/zipkin-go v0.4.2 h1:zjqfqHjUpPmB3c1GlCvvgsM1G4LkvqQbBDueDOCg/jA=
+github.com/openzipkin/zipkin-go v0.4.2/go.mod h1:ZeVkFjuuBiSy13y8vpSDCjMi9GoI3hPpCJSBx/EYFhY=
 github.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.0.1/go.mod h1:r9LEWfGN8R5k0VXJ+0BkIe7MYkRdwZOjgMj2KwnJFUo=
 github.com/pelletier/go-toml/v2 v2.1.0 h1:FnwAJ4oYMvbT/34k9zzHuZNrhlz48GB3/s6at6/MHO4=
 github.com/pelletier/go-toml/v2 v2.1.0/go.mod h1:tJU2Z3ZkXwnxa4DPO899bsyIoywizdUvyaeZurnPPDc=
+github.com/pierrec/lz4/v4 v4.1.18 h1:xaKrnTkyoqfh1YItXl56+6KJNVYWlEEPuAQW9xsplYQ=
+github.com/pierrec/lz4/v4 v4.1.18/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
 github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
@@ -399,21 +456,50 @@ github.com/posener/complete v1.2.3/go.mod h1:WZIdtGGp+qx0sLrYKtIRAruyNpv6hFCicSg
 github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
 github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=
 github.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=
+github.com/prometheus/client_golang v1.7.1/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=
+github.com/prometheus/client_golang v1.11.0/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=
+github.com/prometheus/client_golang v1.12.1/go.mod h1:3Z9XVyYiZYEO+YQWt3RD2R3jrbd179Rt297l4aS6nDY=
+github.com/prometheus/client_golang v1.14.0/go.mod h1:8vpkKitgIVNcqrRBWh1C4TIUQgYNtG/XQE4E/Zae36Y=
+github.com/prometheus/client_golang v1.15.1/go.mod h1:e9yaBhRPU2pPNsZwE+JdQl0KEt1N9XgF6zxWmaC0xOk=
+github.com/prometheus/client_golang v1.17.0 h1:rl2sfwZMtSthVU752MqfjQozy7blglC+1SOtjMAMh+Q=
+github.com/prometheus/client_golang v1.17.0/go.mod h1:VeL+gMmOAxkS2IqfCq0ZmHSL+LjWfWDUmp1mBz9JgUY=
 github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
 github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.3.0/go.mod h1:LDGWKZIo7rky3hgvBe+caln+Dr3dPggB5dvjtD7w9+w=
+github.com/prometheus/client_model v0.4.0/go.mod h1:oMQmHW1/JoDwqLtg57MGgP/Fb1CJEYF2imWWhWtMkYU=
+github.com/prometheus/client_model v0.4.1-0.20230718164431-9a2bf3000d16 h1:v7DLqVdK4VrYkVD5diGdl4sxJurKJEMnODWRJlxV9oM=
+github.com/prometheus/client_model v0.4.1-0.20230718164431-9a2bf3000d16/go.mod h1:oMQmHW1/JoDwqLtg57MGgP/Fb1CJEYF2imWWhWtMkYU=
 github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=
 github.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=
+github.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=
+github.com/prometheus/common v0.26.0/go.mod h1:M7rCNAaPfAosfx8veZJCuw84e35h3Cfd9VFqTh1DIvc=
+github.com/prometheus/common v0.32.1/go.mod h1:vu+V0TpY+O6vW9J44gczi3Ap/oXXR10b+M/gUGO4Hls=
+github.com/prometheus/common v0.37.0/go.mod h1:phzohg0JFMnBEFGxTDbfu3QyL5GI8gTQJFhYO5B3mfA=
+github.com/prometheus/common v0.42.0/go.mod h1:xBwqVerjNdUDjgODMpudtOMwlOwf2SaTr1yjz4b7Zbc=
+github.com/prometheus/common v0.44.0 h1:+5BrQJwiBB9xsMygAB3TNvpQKOwlkc25LbISbrdOOfY=
+github.com/prometheus/common v0.44.0/go.mod h1:ofAIvZbQ1e/nugmZGz4/qCb9Ap1VoSTIO7x0VV9VvuY=
 github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
 github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
 github.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=
+github.com/prometheus/procfs v0.1.3/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=
+github.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=
+github.com/prometheus/procfs v0.7.3/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=
+github.com/prometheus/procfs v0.8.0/go.mod h1:z7EfXMXOkbkqb9IINtpCn86r/to3BnA0uaxHdg830/4=
+github.com/prometheus/procfs v0.9.0/go.mod h1:+pB4zwohETzFnmlpe6yd2lSc+0/46IYZRB/chUwxUZY=
+github.com/prometheus/procfs v0.11.1 h1:xRC8Iq1yyca5ypa9n1EZnWZkt7dwcoRPQwX/5gwaUuI=
+github.com/prometheus/procfs v0.11.1/go.mod h1:eesXgaPo1q7lBpVMoMy0ZOFTth9hBn4W/y0/p/ScXhY=
+github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=
+github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=
 github.com/redis/go-redis/v9 v9.2.1 h1:WlYJg71ODF0dVspZZCpYmoF1+U1Jjk9Rwd7pq6QmlCg=
 github.com/redis/go-redis/v9 v9.2.1/go.mod h1:hdY0cQFCN4fnSYT6TkisLufl/4W5UIXyv0b/CLO2V2M=
 github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
 github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
 github.com/rogpeppe/go-internal v1.8.0/go.mod h1:WmiCO8CzOY8rg0OYDC4/i/2WRWAB6poM+XZ2dLUbcbE=
-github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=
+github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
+github.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=
+github.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=
 github.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
 github.com/sagikazarmark/crypt v0.15.0 h1:TQJg76CemcIdJyC9/dmNjU9OUyIFHyvE50Tpq1t1nqY=
 github.com/sagikazarmark/crypt v0.15.0/go.mod h1:5rwNNax6Mlk9sZ40AcyVtiEw24Z4J04cfSioF2COKmc=
@@ -425,6 +511,7 @@ github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 h1:nn5Wsu0esKSJiIVhscUt
 github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
 github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
+github.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=
 github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=
 github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=
 github.com/spf13/afero v1.10.0 h1:EaGW2JJh15aKOejeuJ+wpFSHnbd7GE6Wvp3TsNhb6LY=
@@ -470,10 +557,14 @@ github.com/ugorji/go/codec v1.2.11 h1:BMaWp1Bb6fHwEtbplGBGJ498wD+LKlNSl25MjdZY4d
 github.com/ugorji/go/codec v1.2.11/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
 github.com/xdg-go/pbkdf2 v1.0.0 h1:Su7DPu48wXMwC3bs7MCNG+z4FhcyEuz5dlvchbq0B0c=
 github.com/xdg-go/pbkdf2 v1.0.0/go.mod h1:jrpuAogTd400dnrH08LKmI/xc1MbPOebTwRqcT5RDeI=
-github.com/xdg-go/scram v1.0.2 h1:akYIkZ28e6A96dkWNJQu3nmCzH3YfwMPQExUYDaRv7w=
 github.com/xdg-go/scram v1.0.2/go.mod h1:1WAq6h33pAW+iRreB34OORO2Nf7qel3VV3fjBj+hCSs=
-github.com/xdg-go/stringprep v1.0.2 h1:6iq84/ryjjeRmMJwxutI51F2GIPlP5BfTvXHeYjyhBc=
+github.com/xdg-go/scram v1.1.2 h1:FHX5I5B4i4hKRVRBCFRxq1iQRej7WO3hhBuJf+UUySY=
+github.com/xdg-go/scram v1.1.2/go.mod h1:RT/sEzTbU5y00aCK8UOx6R7YryM0iF1N2MOmC3kKLN4=
 github.com/xdg-go/stringprep v1.0.2/go.mod h1:8F9zXuvzgwmyT5DUm4GUfZGDdT3W+LCvS6+da4O5kxM=
+github.com/xdg-go/stringprep v1.0.4 h1:XLI/Ng3O1Atzq0oBs3TWm+5ZVgkq2aqdlvP9JtoZ6c8=
+github.com/xdg-go/stringprep v1.0.4/go.mod h1:mPGuuIYwz7CmR2bT9j4GbQqutWS1zV24gijq1dTyGkM=
+github.com/xhit/go-str2duration v1.2.0/go.mod h1:3cPSlfZlUHVlneIVfePFWcJZsuwf+P1v2SRTV4cUmp4=
+github.com/xhit/go-str2duration/v2 v2.1.0/go.mod h1:ohY8p+0f07DiV6Em5LKB0s2YpLtXVyJfNt1+BlmyAsU=
 github.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d h1:splanxYIlg+5LfHAM6xpdFEAYOk8iySO56hMFq6uLyA=
 github.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d/go.mod h1:rHwXgn7JulP+udvsHwJoVG1YGAP6VLg4y9I5dyZdqmA=
 github.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
@@ -481,6 +572,7 @@ github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9de
 github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
+github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
 go.etcd.io/etcd/api/v3 v3.5.9 h1:4wSsluwyTbGGmyjJktOf3wFQoTBIURXHnq9n/G/JQHs=
 go.etcd.io/etcd/api/v3 v3.5.9/go.mod h1:uyAal843mC8uUVSLWz6eHa/d971iDGnCRpmKd2Z+X8k=
 go.etcd.io/etcd/client/pkg/v3 v3.5.9 h1:oidDC4+YEuSIQbsR94rY9gur91UPL6DnxDCIYd2IGsE=
@@ -499,6 +591,19 @@ go.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=
 go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
 go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin v0.46.1 h1:mMv2jG58h6ZI5t5S9QCVGdzCmAsTakMa3oxVgpSD44g=
+go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin v0.46.1/go.mod h1:oqRuNKG0upTaDPbLVCG8AD0G2ETrfDtmh7jViy7ox6M=
+go.opentelemetry.io/contrib/propagators/b3 v1.21.1 h1:WPYiUgmw3+b7b3sQ1bFBFAf0q+Di9dvNc3AtYfnT4RQ=
+go.opentelemetry.io/otel v1.21.0 h1:hzLeKBZEL7Okw2mGzZ0cc4k/A7Fta0uoPgaJCr8fsFc=
+go.opentelemetry.io/otel v1.21.0/go.mod h1:QZzNPQPm1zLX4gZK4cMi+71eaorMSGT3A4znnUvNNEo=
+go.opentelemetry.io/otel/exporters/zipkin v1.21.0 h1:D+Gv6lSfrFBWmQYyxKjDd0Zuld9SRXpIrEsKZvE4DO4=
+go.opentelemetry.io/otel/exporters/zipkin v1.21.0/go.mod h1:83oMKR6DzmHisFOW3I+yIMGZUTjxiWaiBI8M8+TU5zE=
+go.opentelemetry.io/otel/metric v1.21.0 h1:tlYWfeo+Bocx5kLEloTjbcDwBuELRrIFxwdQ36PlJu4=
+go.opentelemetry.io/otel/metric v1.21.0/go.mod h1:o1p3CA8nNHW8j5yuQLdc1eeqEaPfzug24uvsyIEJRWM=
+go.opentelemetry.io/otel/sdk v1.21.0 h1:FTt8qirL1EysG6sTQRZ5TokkU8d0ugCj8htOgThZXQ8=
+go.opentelemetry.io/otel/sdk v1.21.0/go.mod h1:Nna6Yv7PWTdgJHVRD9hIYywQBRx7pbox6nwBnZIxl/E=
+go.opentelemetry.io/otel/trace v1.21.0 h1:WD9i5gzvoUPuXIXH24ZNBudiarZDKuekPqi/E8fpfLc=
+go.opentelemetry.io/otel/trace v1.21.0/go.mod h1:LGbsEB0f9LGjN+OZaQQ26sohbOmiMR+BaslueVtS/qQ=
 go.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=
 go.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=
 go.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=
@@ -507,8 +612,8 @@ go.uber.org/goleak v1.1.11/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ
 go.uber.org/mock v0.3.0 h1:3mUxI1No2/60yUYax92Pt8eNOEecx2D3lcXZh2NEZJo=
 go.uber.org/mock v0.3.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=
 go.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=
-go.uber.org/multierr v1.9.0 h1:7fIwc/ZtS0q++VgcfqFDxSBZVv/Xo49/SYnDFupUwlI=
-go.uber.org/multierr v1.9.0/go.mod h1:X2jQV1h+kxSjClGpnseKVIxpmcjrj7MNnI0bnlfKTVQ=
+go.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=
+go.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=
 go.uber.org/zap v1.21.0 h1:WefMeulhovoZ2sYXz7st6K0sLj7bBhpiFaud4r4zST8=
 go.uber.org/zap v1.21.0/go.mod h1:wjWOCqI0f2ZZrJF/UufIOkiC8ii6tm1iqIsLo76RfJw=
 golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
@@ -524,9 +629,11 @@ golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPh
 golang.org/x/crypto v0.0.0-20201216223049-8b5274cf687f/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=
 golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=
 golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
+golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
-golang.org/x/crypto v0.14.0 h1:wBqGXzWJW6m1XrIKlAH0Hs1JJ7+9KBwnIO8v66Q9cHc=
-golang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=
+golang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=
+golang.org/x/crypto v0.15.0 h1:frVn1TEaCEaZcn3Tmd7Y2b5KKPaZ+I32Q2OA3kYp5TA=
+golang.org/x/crypto v0.15.0/go.mod h1:4ChreQoLWfG3xLDer1WdlH5NdlQ3+mwnQq1YTKY+72g=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
@@ -563,8 +670,8 @@ golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.4.1/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
-golang.org/x/mod v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=
-golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
+golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
+golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
@@ -602,9 +709,16 @@ golang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
 golang.org/x/net v0.0.0-20210410081132-afb366fc7cd1/go.mod h1:9tjilg8BloeKEkVJvy7fQ90B1CfIiPueXVOjqfkSzI8=
+golang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
-golang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=
-golang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=
+golang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
+golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
+golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
+golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
+golang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
+golang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=
+golang.org/x/net v0.18.0 h1:mIYleuAkSbHh0tCv7RvjL3F6ZVbLjq4+R7zbOn3Kokg=
+golang.org/x/net v0.18.0/go.mod h1:/czyP5RqHAH4odGYxBJ1qz0+CE5WZ+2j1YgoEo8F2jQ=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
@@ -614,6 +728,10 @@ golang.org/x/oauth2 v0.0.0-20200902213428-5d25da1a8d43/go.mod h1:KelEdhl1UZF7XfJ
 golang.org/x/oauth2 v0.0.0-20201109201403-9fd604954f58/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
 golang.org/x/oauth2 v0.0.0-20201208152858-08078c50e5b5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
 golang.org/x/oauth2 v0.0.0-20210218202405-ba52d332ba99/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
+golang.org/x/oauth2 v0.0.0-20210514164344-f6687ab2804c/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
+golang.org/x/oauth2 v0.0.0-20220223155221-ee480838109b/go.mod h1:DAh4E804XQdzx2j+YRIaUnCqCV2RuMz24cGBJ5QYIrc=
+golang.org/x/oauth2 v0.5.0/go.mod h1:9/XBHVqLaWO3/BRHs5jbpYCnOZVjj5V0ndyaAM7KB4I=
+golang.org/x/oauth2 v0.8.0/go.mod h1:yr7u4HXZRm1R1kBWqr/xKNqewf0plRYoB7sla+BCIXE=
 golang.org/x/oauth2 v0.12.0 h1:smVPGxink+n1ZI5pkQa8y6fZT0RW0MgCO5bFpepy4B4=
 golang.org/x/oauth2 v0.12.0/go.mod h1:A74bZ3aGXgCY0qaIC9Ahg6Lglin4AMAco8cIv9baba4=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -627,8 +745,12 @@ golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=
+golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=
+golang.org/x/sync v0.4.0 h1:zxkM55ReGkDlKSM+Fu41A+zmbZuaPVbGMzvvdUPznYQ=
+golang.org/x/sync v0.4.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=
 golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -649,6 +771,7 @@ golang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -662,6 +785,8 @@ golang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200905004654-be1d3432aa8f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -669,26 +794,40 @@ golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210104204734-6f8348627aad/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210225134936-a50acf3fe073/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423185535-09eb48e85fd7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210603081109-ebe580a85c40/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220114195835-da31bd327af9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220704084225-05e143d24a9e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.3.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.13.0 h1:Af8nKPmuFypiUBjVoU9V20FiaFXOcuZI21p0ycVYYGE=
-golang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.9.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.14.0 h1:Vz7Qs629MkJkGyHxUlRHizWJRG2j8fbQKjELVSNhy7Q=
+golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
+golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
+golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=
+golang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=
 golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
@@ -698,8 +837,11 @@ golang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=
-golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
+golang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=
+golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
+golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
+golang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=
+golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
 golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
@@ -758,8 +900,8 @@ golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4f
 golang.org/x/tools v0.0.0-20210108195828-e2f9c7f1fc8e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
 golang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
-golang.org/x/tools v0.13.0 h1:Iey4qkscZuv0VvIt8E0neZjtPVQFSc870HQ448QgEmQ=
-golang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=
+golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
+golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -868,6 +1010,8 @@ google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlba
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+google.golang.org/protobuf v1.30.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
 google.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=
 google.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
@@ -884,6 +1028,7 @@ gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
 gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
@@ -894,9 +1039,14 @@ gorm.io/driver/mysql v1.5.2 h1:QC2HRskSE75wBuOxe0+iCkyJZ+RqpudsQtqkp+IMuXs=
 gorm.io/driver/mysql v1.5.2/go.mod h1:pQLhh1Ut/WUAySdTHwBpBv6+JKcj+ua4ZFx1QQTBzb8=
 gorm.io/driver/sqlite v1.5.4 h1:IqXwXi8M/ZlPzH/947tn5uik3aYQslP9BVveoax0nV0=
 gorm.io/driver/sqlite v1.5.4/go.mod h1:qxAuCol+2r6PannQDpOP1FP6ag3mKi4esLnB/jHed+4=
+gorm.io/gorm v1.25.0/go.mod h1:L4uxeKpfBml98NYqVqwAdmV1a2nBtAec/cf3fpucW/k=
 gorm.io/gorm v1.25.2-0.20230530020048-26663ab9bf55/go.mod h1:L4uxeKpfBml98NYqVqwAdmV1a2nBtAec/cf3fpucW/k=
 gorm.io/gorm v1.25.5 h1:zR9lOiiYf09VNh5Q1gphfyia1JpiClIWG9hQaxB/mls=
 gorm.io/gorm v1.25.5/go.mod h1:hbnx/Oo0ChWMn1BIhpy1oYozzpM15i4YPuHDmfYtwg8=
+gorm.io/plugin/opentelemetry v0.1.4 h1:7p0ocWELjSSRI7NCKPW2mVe6h43YPini99sNJcbsTuc=
+gorm.io/plugin/opentelemetry v0.1.4/go.mod h1:tndJHOdvPT0pyGhOb8E2209eXJCUxhC5UpKw7bGVWeI=
+gorm.io/plugin/prometheus v0.0.0-20231026031148-436184e80556 h1:NAptouXjDkFho3xM9mA0XtM6VtJQ8lqdDKL4ug/UUd8=
+gorm.io/plugin/prometheus v0.0.0-20231026031148-436184e80556/go.mod h1:5nrc/JrWCUNoDXCY4eOae/FK/J5WjQ0axXuFusCzdTc=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
diff --git a/opentelemetry/server_test.go b/opentelemetry/server_test.go
new file mode 100644
index 0000000..4e4c537
--- /dev/null
+++ b/opentelemetry/server_test.go
@@ -0,0 +1,81 @@
+package opentelemetry
+
+import (
+	"context"
+	"github.com/gin-gonic/gin"
+	"github.com/stretchr/testify/require"
+	"go.opentelemetry.io/otel"
+	"go.opentelemetry.io/otel/attribute"
+	"go.opentelemetry.io/otel/exporters/zipkin"
+	"go.opentelemetry.io/otel/propagation"
+	"go.opentelemetry.io/otel/sdk/resource"
+	"go.opentelemetry.io/otel/sdk/trace"
+	semconv "go.opentelemetry.io/otel/semconv/v1.21.0"
+	"net/http"
+	"testing"
+	"time"
+)
+
+func TestServer(t *testing.T) {
+	res, err := newResource("demo", "v0.0.1")
+	require.NoError(t, err)
+
+	prop := newPropagator()
+	// 在客户端和服务端之间传递 tracing 的相关信息
+	otel.SetTextMapPropagator(prop)
+
+	// 初始化 trace provider
+	// 这个 provider 就是用来在打点的时候构建 trace 的
+	tp, err := newTraceProvider(res)
+	require.NoError(t, err)
+	defer tp.Shutdown(context.Background())
+	otel.SetTracerProvider(tp)
+
+	server := gin.Default()
+	server.GET("/test", func(ginCtx *gin.Context) {
+		// 名字唯一
+		tracer := otel.Tracer("gitee.com/geekbang/basic-go/opentelemetry")
+		var ctx context.Context = ginCtx
+		ctx, span := tracer.Start(ctx, "top-span")
+		defer span.End()
+		time.Sleep(time.Second)
+		span.AddEvent("发生了某事")
+		ctx, subSpan := tracer.Start(ctx, "sub-span")
+		defer subSpan.End()
+		subSpan.SetAttributes(attribute.String("attr1", "value1"))
+		time.Sleep(time.Millisecond * 300)
+		ginCtx.String(http.StatusOK, "测试 span")
+	})
+	server.Run(":8082")
+}
+
+func newResource(serviceName, serviceVersion string) (*resource.Resource, error) {
+	return resource.Merge(resource.Default(),
+		resource.NewWithAttributes(semconv.SchemaURL,
+			semconv.ServiceName(serviceName),
+			semconv.ServiceVersion(serviceVersion),
+		))
+}
+
+func newTraceProvider(res *resource.Resource) (*trace.TracerProvider, error) {
+	exporter, err := zipkin.New(
+		"http://localhost:9411/api/v2/spans")
+	if err != nil {
+		return nil, err
+	}
+
+	traceProvider := trace.NewTracerProvider(
+		trace.WithBatcher(exporter,
+			// Default is 5s. Set to 1s for demonstrative purposes.
+			trace.WithBatchTimeout(time.Second)),
+		trace.WithResource(res),
+	)
+	return traceProvider, nil
+}
+
+func newPropagator() propagation.TextMapPropagator {
+	return propagation.NewCompositeTextMapPropagator(
+		propagation.TraceContext{},
+		propagation.Baggage{},
+	)
+}
diff --git a/qa/2023.11.14/demo_test.go b/qa/2023.11.14/demo_test.go
new file mode 100644
index 0000000..b6b5c7c
--- /dev/null
+++ b/qa/2023.11.14/demo_test.go
@@ -0,0 +1,14 @@
+package demo
+
+import (
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+	"testing"
+)
+
+func TestAbc(t *testing.T) {
+	assert.True(t, "abc" > "bcd")
+	t.Log("输出一句话")
+	require.True(t, "abc" > "bcd")
+	t.Log("再次输出一句话")
+}
diff --git a/qa/2023.11.14/json_test.go b/qa/2023.11.14/json_test.go
new file mode 100644
index 0000000..10c4279
--- /dev/null
+++ b/qa/2023.11.14/json_test.go
@@ -0,0 +1,41 @@
+package demo
+
+import (
+	"encoding/json"
+	"github.com/stretchr/testify/assert"
+	"testing"
+)
+
+// 问题：我怎么在序列化 JSON 的时候，加密一些字段？
+
+type User struct {
+	Password MaskedString
+	Email    string
+	Phone    MaskedPhone
+}
+
+type MaskedPhone string
+
+func (m MaskedPhone) MarshalJSON() ([]byte, error) {
+	str := string(m)
+	var res = []byte(str[0:3])
+	res = append(res, "****"...)
+	res = append(res, str[7:]...)
+	return res, nil
+}
+
+type MaskedString string
+
+func (m MaskedString) MarshalJSON() ([]byte, error) {
+	return []byte(`"****"`), nil
+}
+
+func TestJson(t *testing.T) {
+	u := User{
+		Password: "123456",
+		Email:    "123@qq.com",
+	}
+	val, err := json.Marshal(u)
+	assert.NoError(t, err)
+	t.Log(string(val))
+}
diff --git a/qa/2023.11.14/timer_test.go b/qa/2023.11.14/timer_test.go
new file mode 100644
index 0000000..14ac641
--- /dev/null
+++ b/qa/2023.11.14/timer_test.go
@@ -0,0 +1,91 @@
+//go:build demo
+
+package demo
+
+import (
+	"context"
+	"sync"
+	"testing"
+	"time"
+)
+
+func TestTimer(t *testing.T) {
+	// 每秒钟的定时器
+	//tm := time.NewTimer(time.Second)
+	// 这里就是触发了
+	//for now := range tm.C {
+	// 在这里异步发送
+	//}
+}
+
+type smsHomework struct {
+}
+
+func (s *smsHomework) StartAsyncCycle() {
+	for {
+		req, err := s.preempt()
+		if err == ReqNotFound {
+			// 数据没找到，我睡一秒
+			time.Sleep(time.Second)
+			continue
+		} else if err != nil {
+			// 记录日志
+		}
+		// 记得给一个 ctx
+		err := s.Send(ctx, req.TplId, req.Args, req.Numbers...)
+		// 这里记得处理 error
+		// 如果你设计了重试，这里要考虑重试的问题
+		if err == nil {
+			// 我这个请求处理完毕了
+			s.repo.MarkSuccess(req)
+			continue
+		}
+		// 你在这边要增加已重试次数
+	}
+}
+
+func (s *smsHomework) preempt() (AsyncReq, error) {
+	// 你这边可以考虑多个实例的问题
+	// 例如，有一个请求发送给 152xxxxxx 一条短信了，
+	panic("从数据库里面捞一个异步发送请求过来")
+}
+
+func (s *smsHomework) Send(ctx context.Context, tplId string, args []string, numbers ...string) error {
+	if s.needAsync() {
+		// 需要转异步了
+		// 转储到数据库里面去
+		s.repo.Store(AsyncReq{})
+		return nil
+	}
+	return s.svc.Send(ctx, tplId, args, numbers...)
+}
+
+func (s *smsHomework) needAsync() bool {
+	// 你要核心考虑的判定方式
+}
+
+type AsyncReq struct {
+	TplId   string
+	Args    []string
+	Numbers []string
+	// 你还可以有其他的
+}
+
+var l sync.Mutex
+
+func Lock() {
+	l.Lock()
+	DoSomething()
+	l.Unlock()
+}
+
+func LockV1() {
+	l.Lock()
+	defer l.Unlock()
+	DoSomething()
+
+}
+
+func DoSomething() {
+	panic("abc")
+}
diff --git a/sarama/consumer_test.go b/sarama/consumer_test.go
new file mode 100644
index 0000000..e508602
--- /dev/null
+++ b/sarama/consumer_test.go
@@ -0,0 +1,94 @@
+package sarama
+
+import (
+	"context"
+	"github.com/IBM/sarama"
+	"github.com/stretchr/testify/assert"
+	"golang.org/x/sync/errgroup"
+	"log"
+	"testing"
+	"time"
+)
+
+func TestConsumer(t *testing.T) {
+	cfg := sarama.NewConfig()
+	consumer, err := sarama.NewConsumerGroup(addr, "demo", cfg)
+	assert.NoError(t, err)
+	ctx, cancel := context.WithTimeout(context.Background(), time.Minute*10)
+	defer cancel()
+	start := time.Now()
+	err = consumer.Consume(ctx,
+		[]string{"test_topic"}, ConsumerHandler{})
+	assert.NoError(t, err)
+	t.Log(time.Since(start).String())
+}
+
+type ConsumerHandler struct {
+}
+
+func (c ConsumerHandler) Setup(session sarama.ConsumerGroupSession) error {
+	log.Println("这是 Setup")
+	//partitions := session.Claims()["test_topic"]
+	//for _, part := range partitions {
+	//	session.ResetOffset("test_topic",
+	//		part, sarama.OffsetOldest, "")
+	//}
+	return nil
+}
+
+func (c ConsumerHandler) Cleanup(session sarama.ConsumerGroupSession) error {
+	log.Println("这是 Cleanup")
+	return nil
+}
+
+func (c ConsumerHandler) ConsumeClaim(session sarama.ConsumerGroupSession,
+	claim sarama.ConsumerGroupClaim) error {
+	msgs := claim.Messages()
+	const batchSize = 10
+	for {
+		batch := make([]*sarama.ConsumerMessage, 0, batchSize)
+		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+		var done = false
+		var eg errgroup.Group
+		for i := 0; i < batchSize && !done; i++ {
+			select {
+			case <-ctx.Done():
+				// 超时了
+				done = true
+			case msg, ok := <-msgs:
+				if !ok {
+					cancel()
+					return nil
+				}
+				batch = append(batch, msg)
+				eg.Go(func() error {
+					// 并发处理
+					log.Println(string(msg.Value))
+					return nil
+				})
+			}
+		}
+		cancel()
+		err := eg.Wait()
+		if err != nil {
+			log.Println(err)
+			continue
+		}
+		// 凑够了一批，然后你就处理
+		// log.Println(batch)
+
+		for _, msg := range batch {
+			session.MarkMessage(msg, "")
+		}
+	}
+}
+
+func (c ConsumerHandler) ConsumeClaimV1(session sarama.ConsumerGroupSession,
+	claim sarama.ConsumerGroupClaim) error {
+	msgs := claim.Messages()
+	for msg := range msgs {
+		log.Println(string(msg.Value))
+		session.MarkMessage(msg, "")
+	}
+	return nil
+}
diff --git a/sarama/producer_test.go b/sarama/producer_test.go
new file mode 100644
index 0000000..b83f4fb
--- /dev/null
+++ b/sarama/producer_test.go
@@ -0,0 +1,64 @@
+package sarama
+
+import (
+	"github.com/IBM/sarama"
+	"github.com/stretchr/testify/assert"
+	"testing"
+)
+
+var addr = []string{"localhost:9094"}
+
+func TestSyncProducer(t *testing.T) {
+	cfg := sarama.NewConfig()
+	cfg.Producer.Return.Successes = true
+	producer, err := sarama.NewSyncProducer(addr, cfg)
+	cfg.Producer.Partitioner = sarama.NewRoundRobinPartitioner
+	//cfg.Producer.Partitioner = sarama.NewRandomPartitioner
+	//cfg.Producer.Partitioner = sarama.NewHashPartitioner
+	//cfg.Producer.Partitioner = sarama.NewManualPartitioner
+	//cfg.Producer.Partitioner = sarama.NewConsistentCRCHashPartitioner
+	//cfg.Producer.Partitioner = sarama.NewCustomPartitioner()
+	assert.NoError(t, err)
+	for i := 0; i < 100; i++ {
+		_, _, err = producer.SendMessage(&sarama.ProducerMessage{
+			Topic: "test_topic",
+			Value: sarama.StringEncoder("这是一条消息"),
+			// 会在生产者和消费者之间传递的
+			Headers: []sarama.RecordHeader{
+				{
+					Key:   []byte("key1"),
+					Value: []byte("value1"),
+				},
+			},
+			Metadata: "这是 metadata",
+		})
+	}
+}
+
+func TestAsyncProducer(t *testing.T) {
+	cfg := sarama.NewConfig()
+	cfg.Producer.Return.Successes = true
+	cfg.Producer.Return.Errors = true
+	producer, err := sarama.NewAsyncProducer(addr, cfg)
+	assert.NoError(t, err)
+	msgs := producer.Input()
+	msgs <- &sarama.ProducerMessage{
+		Topic: "test_topic",
+		Value: sarama.StringEncoder("这是一条消息"),
+		// 会在生产者和消费者之间传递的
+		Headers: []sarama.RecordHeader{
+			{
+				Key:   []byte("key1"),
+				Value: []byte("value1"),
+			},
+		},
+		Metadata: "这是 metadata",
+	}
+
+	select {
+	case msg := <-producer.Successes():
+		t.Log("发送成功", string(msg.Value.(sarama.StringEncoder)))
+	case err := <-producer.Errors():
+		t.Log("发送失败", err.Err, err.Msg)
+	}
+}
diff --git a/shares/2023.11.16/channel_test.go b/shares/2023.11.16/channel_test.go
new file mode 100644
index 0000000..7020015
--- /dev/null
+++ b/shares/2023.11.16/channel_test.go
@@ -0,0 +1,48 @@
+package main
+
+import (
+	"github.com/stretchr/testify/assert"
+	"io"
+	"testing"
+)
+
+func TestChannel(t *testing.T) {
+	c := make(chan struct{})
+	close(c)
+	assert.Panics(t, func() {
+		// 往已经关闭的channel写数据，会 panic
+		c <- struct{}{}
+	})
+
+	//c := getFromXXX()
+
+	// data := <- c
+}
+
+func TestChannelBlocking(t *testing.T) {
+	// 没有初始化，c == nil
+	var c chan struct{}
+	// 这两个都会导致阻塞
+
+	go func() {
+		<-c
+		t.Log("111不会输出这一句")
+	}()
+	var b1 BigStruct
+	go func() {
+		var b2 BigStruct
+		c <- struct{}{}
+		t.Log("222不会输出这一句", b1, b2)
+	}()
+}
+
+type BigStruct struct {
+}
+
+func Close[T io.Closer](t T) {
+	t.Close()
+}
+
+//public class Abc<T extends Closer> {
+//
+//}
diff --git a/shares/2023.11.16/component.go b/shares/2023.11.16/component.go
new file mode 100644
index 0000000..ee088c2
--- /dev/null
+++ b/shares/2023.11.16/component.go
@@ -0,0 +1,37 @@
+package main
+
+import "log"
+
+type Parent struct{}
+
+func (p Parent) SayHello() {
+	log.Println("Hello, I am " + p.Name())
+}
+
+func (p Parent) Name() string {
+	return "Parent"
+}
+
+type Son struct {
+	Parent
+}
+
+// 等价于这个
+//func (p Son) SayHello() {
+//	log.Println("Hello, I am " + p.Parent.Name())
+//}
+
+//func (p Son) SayHello() {
+//	log.Println("Hello, I am " + p.Name())
+//}
+
+func (p Son) Name() string {
+	return "Son"
+}
+
+func main() {
+	var s Son
+	// 面向对象继承的说法：Hello, I am Son
+	// 但是在 GO 里面，组合：Hello, I am Parent
+	s.SayHello()
+}
diff --git a/shares/2023.11.16/entity_test.go b/shares/2023.11.16/entity_test.go
new file mode 100644
index 0000000..19697c4
--- /dev/null
+++ b/shares/2023.11.16/entity_test.go
@@ -0,0 +1,86 @@
+package main
+
+import (
+	"github.com/stretchr/testify/assert"
+	"testing"
+	"time"
+)
+
+type BaseEntity struct {
+	Id         int64
+	CreateTime time.Time
+	UpdateTime time.Time
+}
+
+type User struct {
+	BaseEntity
+	name string
+}
+
+func NewUserByName(name string) User {
+	return User{
+		name: name,
+	}
+}
+
+func NewUserById(id int64) User {
+	return User{
+		BaseEntity: BaseEntity{
+			Id: id,
+		},
+	}
+}
+
+// 插入 T 到数据库
+func Insert[T BaseEntity](t T) {
+
+}
+
+//func TestInsert(t *testing.T) {
+//	Insert[User](User{})
+//}
+
+type Stream[T any] struct {
+}
+
+//func (s *Stream[T]) Map[E any](func(t T) E) *Stream[E] {
+//
+//}
+
+func (s *Stream[T]) Filter() {
+
+}
+
+//type Orm interface {
+//	Select[T any]() (*T, error)
+//}
+//
+//func TestUseOrm(t *testing.T) {
+//	var o Orm
+//	user, err := o.Select[User]()
+//	order, err := o.Select[Order]()
+//}
+
+type Selector[T any] struct {
+}
+
+func (s *Selector[T]) Get() (*T, error) {
+	return new(T), nil
+}
+
+func TestUseSelector(t *testing.T) {
+	s := &Selector[User]{}
+	user, err := s.Get()
+	assert.NoError(t, err)
+	t.Log(user)
+}
+
+//func NewA() {
+//
+//}
+
+//public class A {
+//	public A() {
+//
+//	}
+//}
diff --git a/shares/2023.11.16/factory_test.go b/shares/2023.11.16/factory_test.go
new file mode 100644
index 0000000..5b33bd2
--- /dev/null
+++ b/shares/2023.11.16/factory_test.go
@@ -0,0 +1,66 @@
+package main
+
+import (
+	"fmt"
+	"log"
+)
+
+type Factory func() Service
+
+type Service struct {
+}
+
+type FactoryV1 interface {
+	Create() Service
+}
+
+type AbstractFactory struct {
+}
+
+func (f *AbstractFactory) Create() {
+	f.CreatePart1()
+	f.CreatePart2()
+}
+
+func (f *AbstractFactory) CreatePart1() {
+
+}
+
+func (f *AbstractFactory) CreatePart2() {
+
+}
+
+type MyFactory struct {
+	AbstractFactory
+}
+
+func (f *MyFactory) CreatePart2() {
+	log.Println("这是 MyFactory 的 CreatePart2")
+}
+
+type AbstractFactoryV1 struct {
+	CreatePart1 func()
+	CreatePart2 func()
+}
+
+func (f *AbstractFactoryV1) Create() {
+	f.CreatePart1()
+	f.CreatePart2()
+}
+
+type MyFactoryV1 struct {
+	AbstractFactoryV1
+}
+
+func NewMyFactoryV1() MyFactoryV1 {
+	return MyFactoryV1{
+		AbstractFactoryV1{
+			CreatePart2: func() {
+				fmt.Println("创建第二部分")
+			},
+			CreatePart1: func() {
+				fmt.Println("创建第一部分")
+			},
+		},
+	}
+}
diff --git a/shares/2023.11.16/filter_chain_test.go b/shares/2023.11.16/filter_chain_test.go
new file mode 100644
index 0000000..54d3b3f
--- /dev/null
+++ b/shares/2023.11.16/filter_chain_test.go
@@ -0,0 +1,56 @@
+package main
+
+import (
+	"log"
+	"testing"
+)
+
+// 函数式的 Filter
+type Filter func() error
+
+type FilterChain func(next Filter) Filter
+
+type MyServer struct {
+	root Filter
+}
+
+func NewMyServer(flts ...FilterChain) *MyServer {
+	var root Filter = func() error {
+		log.Println("这是最后一个 filter",
+			"正常来说也是框架核心")
+		return nil
+	}
+	// 从后往前组装
+	for i := len(flts) - 1; i >= 0; i-- {
+		root = flts[i](root)
+	}
+	return &MyServer{
+		root: root,
+	}
+}
+
+func (m *MyServer) Serve() error {
+	return m.root()
+}
+
+func TestMyServer(t *testing.T) {
+	var first FilterChain = func(next Filter) Filter {
+		return func() error {
+			log.Println("第一个执行前")
+			err := next()
+			log.Println("第一个执行后")
+			return err
+		}
+	}
+	var second FilterChain = func(next Filter) Filter {
+		return func() error {
+			log.Println("第二个执行前")
+			err := next()
+			log.Println("第二个执行后")
+			return err
+		}
+	}
+
+	server := NewMyServer(first, second)
+	server.Serve()
+}
diff --git a/shares/2023.11.16/option_test.go b/shares/2023.11.16/option_test.go
new file mode 100644
index 0000000..7f24fc2
--- /dev/null
+++ b/shares/2023.11.16/option_test.go
@@ -0,0 +1,36 @@
+package main
+
+import "testing"
+
+type ComplicateStruct struct {
+	field1 string
+	field2 string
+	field3 string
+}
+
+func NewComplicateStruct(field1 string,
+	opts ...ComplicateStructOption) *ComplicateStruct {
+	res := &ComplicateStruct{
+		field1: field1,
+		field2: "这是我的默认值",
+		field3: "这还是我的默认值",
+	}
+	for _, opt := range opts {
+		opt(res)
+	}
+	return res
+}
+
+type ComplicateStructOption func(c *ComplicateStruct)
+
+func WithField2(field2 string) ComplicateStructOption {
+	return func(c *ComplicateStruct) {
+		c.field2 = field2
+	}
+}
+
+func TestOption(t *testing.T) {
+	c := NewComplicateStruct("这是必传",
+		WithField2("Field2自定义的值"))
+	t.Log(c.field2)
+}
diff --git a/syntax/channel/channel_test.go b/syntax/channel/channel_test.go
new file mode 100644
index 0000000..bfff27e
--- /dev/null
+++ b/syntax/channel/channel_test.go
@@ -0,0 +1,88 @@
+package channel
+
+import (
+	"testing"
+	"time"
+)
+
+func TestChannel(t *testing.T) {
+	// 声明
+	//var ch chan struct{}
+	// 声明并创建
+	//ch1 := make(chan int)
+	// 这种是带 buffer 的
+	ch2 := make(chan int, 3)
+	// 把 123 发送到 ch2 里面
+	ch2 <- 123
+	data := <-ch2
+	t.Log(data)
+	// 这个是关闭 channel
+	close(ch2)
+}
+
+func TestChannelClose(t *testing.T) {
+	ch := make(chan int, 1)
+	ch <- 0
+	// ok 代表有咩有读到
+	val, ok := <-ch
+	t.Log("读到了数据吗？", ok, val)
+	close(ch)
+	// 这个操作会引起 panic
+	// ch <- 123
+	val, ok = <-ch
+	t.Log("读到了数据吗？", ok, val)
+
+	/// 也会 panic
+	// close(ch)
+}
+
+func TestChannelLoop(t *testing.T) {
+	ch := make(chan int, 1)
+	go func() {
+		for i := 0; i < 3; i++ {
+			ch <- i
+			time.Sleep(time.Second)
+		}
+		close(ch)
+	}()
+
+	for val := range ch {
+		t.Log(val)
+	}
+}
+
+func TestChannelBlocking(t *testing.T) {
+	ch := make(chan int)
+	b1 := BigStruct{}
+	go func() {
+		var b BigStruct
+		// 这个就是goroutine 泄露
+		ch <- 123
+		t.Log(b, b1)
+	}()
+}
+
+type BigStruct struct {
+	//
+}
+
+func TestChannelSelect(t *testing.T) {
+	ch1 := make(chan int, 1)
+	ch2 := make(chan int, 2)
+	go func() {
+		time.Sleep(time.Second)
+		ch1 <- 123
+	}()
+
+	go func() {
+		time.Sleep(time.Second)
+		ch2 <- 123
+	}()
+	select {
+	case val := <-ch1:
+		t.Log("进来了 ch1 这里", val)
+	case val := <-ch2:
+		t.Log("进来了 ch2 这里", val)
+	}
+	//
+}
diff --git a/syntax/context/context_test.go b/syntax/context/context_test.go
new file mode 100644
index 0000000..3b2a4ae
--- /dev/null
+++ b/syntax/context/context_test.go
@@ -0,0 +1,76 @@
+package context
+
+import (
+	"context"
+	"testing"
+	"time"
+)
+
+type key struct {
+}
+
+func TestContextValue(t *testing.T) {
+	ctx := context.WithValue(context.Background(), key{}, "value1")
+	val, ok := ctx.Value(key{}).(string)
+	t.Log(val, ok)
+}
+
+func TestContextCancel(t *testing.T) {
+	ctx, cancel := context.WithCancel(context.Background())
+	go func() {
+		time.Sleep(time.Second)
+		t.Log("准备调用 cancel 了")
+		cancel()
+	}()
+	<-ctx.Done()
+	t.Log("已经 cancel 了")
+	t.Log(ctx.Err())
+	//select {
+	//case <- ctx.Done():
+	//
+	//case :
+	//	// 业务逻辑
+	//}
+}
+
+func TestContextTimeout(t *testing.T) {
+	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+	defer cancel()
+
+	<-ctx.Done()
+	t.Log("超时了")
+	t.Log(ctx.Err())
+}
+
+func TestContextParentCancel(t *testing.T) {
+	parent, cancel := context.WithCancel(context.Background())
+	time.AfterFunc(time.Second, func() {
+		cancel()
+	})
+	son, sonCancel := context.WithCancel(parent)
+	<-son.Done()
+	t.Log("son 已经过来了")
+	sonCancel()
+}
+
+func TestContextParentCancel1(t *testing.T) {
+	parent, cancel := context.WithCancel(context.Background())
+
+	_, sonCancel := context.WithCancel(parent)
+	time.AfterFunc(time.Second, func() {
+		sonCancel()
+	})
+	<-parent.Done()
+	t.Log("parent 过来了")
+	cancel()
+}
+
+func TestContextParentValue(t *testing.T) {
+	parent := context.WithValue(context.Background(), "key1", "value1")
+
+	son := context.WithValue(parent, "key1", "son-value1")
+	t.Log(son.Value("key1"))
+
+	_ = context.WithValue(parent, "key2", "son-value2")
+	t.Log(parent.Value("key2"))
+}
diff --git a/webook/app.go b/webook/app.go
new file mode 100644
index 0000000..7047c57
--- /dev/null
+++ b/webook/app.go
@@ -0,0 +1,11 @@
+package main
+
+import (
+	"gitee.com/geekbang/basic-go/webook/internal/events"
+	"github.com/gin-gonic/gin"
+)
+
+type App struct {
+	server    *gin.Engine
+	consumers []events.Consumer
+}
diff --git a/webook/config/dev.yaml b/webook/config/dev.yaml
index 0ddf665..ca89572 100644
--- a/webook/config/dev.yaml
+++ b/webook/config/dev.yaml
@@ -5,4 +5,7 @@ redis:
   addr: "localhost:6379"
 
 db:
-  dsn: "root:root@tcp(localhost:13316)/webook"
\ No newline at end of file
+  dsn: "root:root@tcp(localhost:13316)/webook"
+kafka:
+  addr:
+    - "localhost:9094"
\ No newline at end of file
diff --git a/webook/docker-compose.yaml b/webook/docker-compose.yaml
index 879f7fa..9fea714 100644
--- a/webook/docker-compose.yaml
+++ b/webook/docker-compose.yaml
@@ -14,6 +14,17 @@ services:
 #      - 外部访问用 13316
       - 13316:3306
 
+  prometheus:
+    image: prom/prometheus:v2.47.2
+    volumes:
+      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
+    ports:
+      - 9090:9090
+  zipkin:
+    #    用的是不支持 Kafka 之类的简化版本
+    image: openzipkin/zipkin-slim:2.24
+    ports:
+      - '9411:9411'
   redis:
     image: "bitnami/redis:latest"
     restart: always
@@ -37,4 +48,22 @@ services:
       - ALLOW_NON_AUTHENTICATION=yes
     ports:
       - "12379:2379"
-
+  grafana:
+    image: grafana/grafana-enterprise:10.2.0
+    ports:
+      - 3000:3000
+  kafka:
+    image: 'bitnami/kafka:3.6.0'
+    ports:
+      - '9092:9092'
+      - '9094:9094'
+    environment:
+      - KAFKA_CFG_NODE_ID=0
+#      - 允许自动创建 topic，线上不要开启
+      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
+      - KAFKA_CFG_PROCESS_ROLES=controller,broker
+      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
+      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
+      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
+      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
+      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
\ No newline at end of file
diff --git a/webook/internal/domain/history.go b/webook/internal/domain/history.go
new file mode 100644
index 0000000..87fe16b
--- /dev/null
+++ b/webook/internal/domain/history.go
@@ -0,0 +1,7 @@
+package domain
+
+type HistoryRecord struct {
+	BizId int64
+	Biz   string
+	Uid   int64
+}
diff --git a/webook/internal/domain/interactive.go b/webook/internal/domain/interactive.go
new file mode 100644
index 0000000..aafd93c
--- /dev/null
+++ b/webook/internal/domain/interactive.go
@@ -0,0 +1,9 @@
+package domain
+
+type Interactive struct {
+	ReadCnt    int64
+	LikeCnt    int64
+	CollectCnt int64
+	Liked      bool
+	Collected  bool
+}
diff --git a/webook/internal/errs/code.go b/webook/internal/errs/code.go
new file mode 100644
index 0000000..144e69b
--- /dev/null
+++ b/webook/internal/errs/code.go
@@ -0,0 +1,19 @@
+package errs
+
+// User 相关
+const (
+	// UserInvalidInput 统一的用户模块的输入错误
+	UserInvalidInput = 401001
+	// UserInvalidOrPassword 用户名错误或者密码不对
+	UserInvalidOrPassword = 401002
+	// UserDuplicateEmail 用户邮箱冲突
+	UserDuplicateEmail = 401003
+	// UserInternalServerError 统一的用户模块的系统错误
+	UserInternalServerError = 501001
+)
+
+const (
+	// ArticleInvalidInput 文章模块的统一的错误码
+	ArticleInvalidInput        = 402001
+	ArticleInternalServerError = 502001
+)
diff --git a/webook/internal/events/article/consumer.go b/webook/internal/events/article/consumer.go
new file mode 100644
index 0000000..d2bf13f
--- /dev/null
+++ b/webook/internal/events/article/consumer.go
@@ -0,0 +1,72 @@
+package article
+
+import (
+	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/repository"
+	"gitee.com/geekbang/basic-go/webook/pkg/logger"
+	"gitee.com/geekbang/basic-go/webook/pkg/samarax"
+	"github.com/IBM/sarama"
+	"time"
+)
+
+type InteractiveReadEventConsumer struct {
+	repo   repository.InteractiveRepository
+	client sarama.Client
+	l      logger.LoggerV1
+}
+
+func NewInteractiveReadEventConsumer(repo repository.InteractiveRepository,
+	client sarama.Client, l logger.LoggerV1) *InteractiveReadEventConsumer {
+	return &InteractiveReadEventConsumer{repo: repo, client: client, l: l}
+}
+
+func (i *InteractiveReadEventConsumer) Start() error {
+	cg, err := sarama.NewConsumerGroupFromClient("interactive", i.client)
+	if err != nil {
+		return err
+	}
+	go func() {
+		er := cg.Consume(context.Background(),
+			[]string{TopicReadEvent},
+			samarax.NewBatchHandler[ReadEvent](i.l, i.BatchConsume))
+		if er != nil {
+			i.l.Error("退出消费", logger.Error(er))
+		}
+	}()
+	return err
+}
+
+func (i *InteractiveReadEventConsumer) StartV1() error {
+	cg, err := sarama.NewConsumerGroupFromClient("interactive", i.client)
+	if err != nil {
+		return err
+	}
+	go func() {
+		er := cg.Consume(context.Background(),
+			[]string{TopicReadEvent},
+			samarax.NewHandler[ReadEvent](i.l, i.Consume))
+		if er != nil {
+			i.l.Error("退出消费", logger.Error(er))
+		}
+	}()
+	return err
+}
+func (i *InteractiveReadEventConsumer) BatchConsume(msgs []*sarama.ConsumerMessage,
+	events []ReadEvent) error {
+	bizs := make([]string, 0, len(events))
+	bizIds := make([]int64, 0, len(events))
+	for _, evt := range events {
+		bizs = append(bizs, "article")
+		bizIds = append(bizIds, evt.Aid)
+	}
+	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+	defer cancel()
+	return i.repo.BatchIncrReadCnt(ctx, bizs, bizIds)
+}
+
+func (i *InteractiveReadEventConsumer) Consume(msg *sarama.ConsumerMessage,
+	event ReadEvent) error {
+	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+	defer cancel()
+	return i.repo.IncrReadCnt(ctx, "article", event.Aid)
+}
diff --git a/webook/internal/events/article/history.go b/webook/internal/events/article/history.go
new file mode 100644
index 0000000..489ef54
--- /dev/null
+++ b/webook/internal/events/article/history.go
@@ -0,0 +1,44 @@
+package article
+
+import (
+	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/domain"
+	"gitee.com/geekbang/basic-go/webook/internal/repository"
+	"gitee.com/geekbang/basic-go/webook/pkg/logger"
+	"gitee.com/geekbang/basic-go/webook/pkg/samarax"
+	"github.com/IBM/sarama"
+	"time"
+)
+
+type HistoryRecordConsumer struct {
+	repo   repository.HistoryRecordRepository
+	client sarama.Client
+	l      logger.LoggerV1
+}
+
+func (i *HistoryRecordConsumer) Start() error {
+	cg, err := sarama.NewConsumerGroupFromClient("interactive", i.client)
+	if err != nil {
+		return err
+	}
+	go func() {
+		er := cg.Consume(context.Background(),
+			[]string{TopicReadEvent},
+			samarax.NewHandler[ReadEvent](i.l, i.Consume))
+		if er != nil {
+			i.l.Error("退出消费", logger.Error(er))
+		}
+	}()
+	return err
+}
+
+func (i *HistoryRecordConsumer) Consume(msg *sarama.ConsumerMessage,
+	event ReadEvent) error {
+	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+	defer cancel()
+	return i.repo.AddRecord(ctx, domain.HistoryRecord{
+		BizId: event.Aid,
+		Biz:   "article",
+		Uid:   event.Uid,
+	})
+}
diff --git a/webook/internal/events/article/producer.go b/webook/internal/events/article/producer.go
new file mode 100644
index 0000000..5787a1d
--- /dev/null
+++ b/webook/internal/events/article/producer.go
@@ -0,0 +1,42 @@
+package article
+
+import (
+	"encoding/json"
+	"github.com/IBM/sarama"
+)
+
+const TopicReadEvent = "article_read"
+
+type Producer interface {
+	ProduceReadEvent(evt ReadEvent) error
+}
+
+type ReadEvent struct {
+	Aid int64
+	Uid int64
+}
+
+type BatchReadEvent struct {
+	Aids []int64
+	Uids []int64
+}
+
+type SaramaSyncProducer struct {
+	producer sarama.SyncProducer
+}
+
+func NewSaramaSyncProducer(producer sarama.SyncProducer) Producer {
+	return &SaramaSyncProducer{producer: producer}
+}
+
+func (s *SaramaSyncProducer) ProduceReadEvent(evt ReadEvent) error {
+	val, err := json.Marshal(evt)
+	if err != nil {
+		return err
+	}
+	_, _, err = s.producer.SendMessage(&sarama.ProducerMessage{
+		Topic: TopicReadEvent,
+		Value: sarama.StringEncoder(val),
+	})
+	return err
+}
diff --git a/webook/internal/events/types.go b/webook/internal/events/types.go
new file mode 100644
index 0000000..ec46225
--- /dev/null
+++ b/webook/internal/events/types.go
@@ -0,0 +1,5 @@
+package events
+
+type Consumer interface {
+	Start() error
+}
diff --git a/webook/internal/integration/startup/kafka.go b/webook/internal/integration/startup/kafka.go
new file mode 100644
index 0000000..c27bc7f
--- /dev/null
+++ b/webook/internal/integration/startup/kafka.go
@@ -0,0 +1,23 @@
+package startup
+
+import (
+	"github.com/IBM/sarama"
+)
+
+func InitSaramaClient() sarama.Client {
+	scfg := sarama.NewConfig()
+	scfg.Producer.Return.Successes = true
+	client, err := sarama.NewClient([]string{"localhost:9094"}, scfg)
+	if err != nil {
+		panic(err)
+	}
+	return client
+}
+
+func InitSyncProducer(c sarama.Client) sarama.SyncProducer {
+	p, err := sarama.NewSyncProducerFromClient(c)
+	if err != nil {
+		panic(err)
+	}
+	return p
+}
diff --git a/webook/internal/integration/startup/wire.go b/webook/internal/integration/startup/wire.go
index 19eab28..027e792 100644
--- a/webook/internal/integration/startup/wire.go
+++ b/webook/internal/integration/startup/wire.go
@@ -3,6 +3,7 @@
 package startup
 
 import (
+	"gitee.com/geekbang/basic-go/webook/internal/events/article"
 	"gitee.com/geekbang/basic-go/webook/internal/repository"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/cache"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/dao"
@@ -18,6 +19,8 @@ import (
 
 var thirdPartySet = wire.NewSet( // 第三方依赖
 	InitRedis, InitDB,
+	InitSaramaClient,
+	InitSyncProducer,
 	InitLogger)
 
 var userSvcProvider = wire.NewSet(
@@ -50,6 +53,8 @@ func InitWebServer() *gin.Engine {
 		// repository 部分
 		repository.NewCodeRepository,
 
+		article.NewSaramaSyncProducer,
+
 		// Service 部分
 		ioc.InitSMSService,
 		service.NewCodeService,
@@ -82,6 +87,7 @@ func InitArticleHandler(dao dao.ArticleDAO) *web.ArticleHandler {
 		repository.NewCachedArticleRepository,
 		cache.NewArticleRedisCache,
 		service.NewArticleService,
+		article.NewSaramaSyncProducer,
 		web.NewArticleHandler)
 	return &web.ArticleHandler{}
 }
diff --git a/webook/internal/integration/startup/wire_gen.go b/webook/internal/integration/startup/wire_gen.go
index fe636ce..16d65c6 100644
--- a/webook/internal/integration/startup/wire_gen.go
+++ b/webook/internal/integration/startup/wire_gen.go
@@ -7,6 +7,7 @@
 package startup
 
 import (
+	"gitee.com/geekbang/basic-go/webook/internal/events/article"
 	"gitee.com/geekbang/basic-go/webook/internal/repository"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/cache"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/dao"
@@ -40,10 +41,13 @@ func InitWebServer() *gin.Engine {
 	articleDAO := dao.NewArticleGORMDAO(db)
 	articleCache := cache.NewArticleRedisCache(cmdable)
 	articleRepository := repository.NewCachedArticleRepository(articleDAO, userRepository, articleCache)
-	articleService := service.NewArticleService(articleRepository)
+	client := InitSaramaClient()
+	syncProducer := InitSyncProducer(client)
+	producer := article.NewSaramaSyncProducer(syncProducer)
+	articleService := service.NewArticleService(articleRepository, producer)
 	interactiveDAO := dao.NewGORMInteractiveDAO(db)
 	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
-	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
+	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, loggerV1, interactiveCache)
 	interactiveService := service.NewInteractiveService(interactiveRepository)
 	articleHandler := web.NewArticleHandler(loggerV1, articleService, interactiveService)
 	wechatService := InitWechatService(loggerV1)
@@ -70,10 +74,13 @@ func InitArticleHandler(dao2 dao.ArticleDAO) *web.ArticleHandler {
 	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
 	articleCache := cache.NewArticleRedisCache(cmdable)
 	articleRepository := repository.NewCachedArticleRepository(dao2, userRepository, articleCache)
-	articleService := service.NewArticleService(articleRepository)
+	client := InitSaramaClient()
+	syncProducer := InitSyncProducer(client)
+	producer := article.NewSaramaSyncProducer(syncProducer)
+	articleService := service.NewArticleService(articleRepository, producer)
 	interactiveDAO := dao.NewGORMInteractiveDAO(db)
 	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
-	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
+	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, loggerV1, interactiveCache)
 	interactiveService := service.NewInteractiveService(interactiveRepository)
 	articleHandler := web.NewArticleHandler(loggerV1, articleService, interactiveService)
 	return articleHandler
@@ -82,9 +89,10 @@ func InitArticleHandler(dao2 dao.ArticleDAO) *web.ArticleHandler {
 func InitInteractiveService() service.InteractiveService {
 	db := InitDB()
 	interactiveDAO := dao.NewGORMInteractiveDAO(db)
+	loggerV1 := InitLogger()
 	cmdable := InitRedis()
 	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
-	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
+	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, loggerV1, interactiveCache)
 	interactiveService := service.NewInteractiveService(interactiveRepository)
 	return interactiveService
 }
@@ -93,6 +101,8 @@ func InitInteractiveService() service.InteractiveService {
 
 var thirdPartySet = wire.NewSet(
 	InitRedis, InitDB,
+	InitSaramaClient,
+	InitSyncProducer,
 	InitLogger)
 
 var userSvcProvider = wire.NewSet(dao.NewUserDAO, cache.NewUserCache, repository.NewCachedUserRepository, service.NewUserService)
diff --git a/webook/internal/integration/user_test.go b/webook/internal/integration/user_test.go
index 3ae0074..9f0515f 100644
--- a/webook/internal/integration/user_test.go
+++ b/webook/internal/integration/user_test.go
@@ -6,7 +6,7 @@ import (
 	"encoding/json"
 	"fmt"
 	"gitee.com/geekbang/basic-go/webook/internal/integration/startup"
-	"gitee.com/geekbang/basic-go/webook/internal/web"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx"
 	"github.com/gin-gonic/gin"
 	"github.com/stretchr/testify/assert"
 	"net/http"
@@ -31,7 +31,7 @@ func TestUserHandler_SendSMSCode(t *testing.T) {
 		phone string
 
 		wantCode int
-		wantBody web.Result
+		wantBody ginx.Result
 	}{
 		{
 			name: "发送成功的用例",
@@ -53,7 +53,7 @@ func TestUserHandler_SendSMSCode(t *testing.T) {
 			},
 			phone:    "15212345678",
 			wantCode: http.StatusOK,
-			wantBody: web.Result{
+			wantBody: ginx.Result{
 				Msg: "发送成功",
 			},
 		},
@@ -64,7 +64,7 @@ func TestUserHandler_SendSMSCode(t *testing.T) {
 			},
 			after:    func(t *testing.T) {},
 			wantCode: http.StatusOK,
-			wantBody: web.Result{
+			wantBody: ginx.Result{
 				Code: 4,
 				Msg:  "请输入手机号码",
 			},
@@ -88,7 +88,7 @@ func TestUserHandler_SendSMSCode(t *testing.T) {
 			},
 			phone:    "15212345678",
 			wantCode: http.StatusOK,
-			wantBody: web.Result{
+			wantBody: ginx.Result{
 				Code: 4,
 				Msg:  "短信发送太频繁，请稍后再试",
 			},
@@ -112,7 +112,7 @@ func TestUserHandler_SendSMSCode(t *testing.T) {
 			},
 			phone:    "15212345678",
 			wantCode: http.StatusOK,
-			wantBody: web.Result{
+			wantBody: ginx.Result{
 				Code: 5,
 				Msg:  "系统错误",
 			},
@@ -139,7 +139,7 @@ func TestUserHandler_SendSMSCode(t *testing.T) {
 			if tc.wantCode != http.StatusOK {
 				return
 			}
-			var res web.Result
+			var res ginx.Result
 			err = json.NewDecoder(recorder.Body).Decode(&res)
 			assert.NoError(t, err)
 			assert.Equal(t, tc.wantBody, res)
diff --git a/webook/internal/repository/cache/interactive.go b/webook/internal/repository/cache/interactive.go
index 57b9c36..10ef6fe 100644
--- a/webook/internal/repository/cache/interactive.go
+++ b/webook/internal/repository/cache/interactive.go
@@ -4,7 +4,10 @@ import (
 	"context"
 	_ "embed"
 	"fmt"
+	"gitee.com/geekbang/basic-go/webook/internal/domain"
 	"github.com/redis/go-redis/v9"
+	"strconv"
+	"time"
 )
 
 var (
@@ -21,6 +24,8 @@ type InteractiveCache interface {
 	IncrLikeCntIfPresent(ctx context.Context, biz string, id int64) error
 	DecrLikeCntIfPresent(ctx context.Context, biz string, id int64) error
 	IncrCollectCntIfPresent(ctx context.Context, biz string, id int64) error
+	Get(ctx context.Context, biz string, id int64) (domain.Interactive, error)
+	Set(ctx context.Context, biz string, bizId int64, res domain.Interactive) error
 }
 
 type InteractiveRedisCache struct {
@@ -33,6 +38,37 @@ func NewInteractiveRedisCache(client redis.Cmdable) InteractiveCache {
 	}
 }
 
+func (i *InteractiveRedisCache) Set(ctx context.Context,
+	biz string, bizId int64,
+	res domain.Interactive) error {
+	key := i.key(biz, bizId)
+	err := i.client.HSet(ctx, key, fieldCollectCnt, res.CollectCnt,
+		fieldReadCnt, res.ReadCnt,
+		fieldLikeCnt, res.LikeCnt,
+	).Err()
+	if err != nil {
+		return err
+	}
+	return i.client.Expire(ctx, key, time.Minute*15).Err()
+}
+
+func (i *InteractiveRedisCache) Get(ctx context.Context, biz string, id int64) (domain.Interactive, error) {
+	key := i.key(biz, id)
+	res, err := i.client.HGetAll(ctx, key).Result()
+	if err != nil {
+		return domain.Interactive{}, err
+	}
+	if len(res) == 0 {
+		return domain.Interactive{}, ErrKeyNotExist
+	}
+	var intr domain.Interactive
+	// 这边是可以忽略错误的
+	intr.CollectCnt, _ = strconv.ParseInt(res[fieldCollectCnt], 10, 64)
+	intr.LikeCnt, _ = strconv.ParseInt(res[fieldLikeCnt], 10, 64)
+	intr.ReadCnt, _ = strconv.ParseInt(res[fieldReadCnt], 10, 64)
+	return intr, nil
+}
+
 func (i *InteractiveRedisCache) IncrCollectCntIfPresent(ctx context.Context,
 	biz string, id int64) error {
 	key := i.key(biz, id)
diff --git a/webook/internal/repository/dao/interactive.go b/webook/internal/repository/dao/interactive.go
index c3ea119..120d028 100644
--- a/webook/internal/repository/dao/interactive.go
+++ b/webook/internal/repository/dao/interactive.go
@@ -9,15 +9,48 @@ import (
 
 type InteractiveDAO interface {
 	IncrReadCnt(ctx context.Context, biz string, bizId int64) error
+	BatchIncrReadCnt(ctx context.Context, bizs []string, bizIds []int64) error
 	InsertLikeInfo(ctx context.Context, biz string, id int64, uid int64) error
 	DeleteLikeInfo(ctx context.Context, biz string, id int64, uid int64) error
 	InsertCollectionBiz(ctx context.Context, cb UserCollectionBiz) error
+	GetLikeInfo(ctx context.Context,
+		biz string, id int64, uid int64) (UserLikeBiz, error)
+	GetCollectInfo(ctx context.Context,
+		biz string, id int64, uid int64) (UserCollectionBiz, error)
+	Get(ctx context.Context, biz string, id int64) (Interactive, error)
 }
 
 type GORMInteractiveDAO struct {
 	db *gorm.DB
 }
 
+func (dao *GORMInteractiveDAO) Get(ctx context.Context, biz string, id int64) (Interactive, error) {
+	var res Interactive
+	err := dao.db.WithContext(ctx).
+		Where("biz = ? AND biz_id = ?", biz, id).
+		First(&res).Error
+	return res, err
+}
+
+func (dao *GORMInteractiveDAO) GetLikeInfo(ctx context.Context,
+	biz string, id int64, uid int64) (UserLikeBiz, error) {
+	var res UserLikeBiz
+	err := dao.db.WithContext(ctx).
+		Where("biz = ? AND biz_id = ? AND uid = ? AND status = ?",
+			biz, id, uid, 1).
+		First(&res).Error
+	return res, err
+}
+
+func (dao *GORMInteractiveDAO) GetCollectInfo(ctx context.Context,
+	biz string, id int64, uid int64) (UserCollectionBiz, error) {
+	var res UserCollectionBiz
+	err := dao.db.WithContext(ctx).
+		Where("biz = ? AND biz_id = ? AND uid = ?", biz, id, uid).
+		First(&res).Error
+	return res, err
+}
+
 func (dao *GORMInteractiveDAO) InsertCollectionBiz(ctx context.Context,
 	cb UserCollectionBiz) error {
 	now := time.Now().UnixMilli()
@@ -104,6 +137,19 @@ func NewGORMInteractiveDAO(db *gorm.DB) InteractiveDAO {
 	return &GORMInteractiveDAO{db: db}
 }
 
+func (dao *GORMInteractiveDAO) BatchIncrReadCnt(ctx context.Context, bizs []string, bizIds []int64) error {
+	return dao.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
+		txDAO := NewGORMInteractiveDAO(tx)
+		for i := 0; i < len(bizs); i++ {
+			err := txDAO.IncrReadCnt(ctx, bizs[i], bizIds[i])
+			if err != nil {
+				return err
+			}
+		}
+		return nil
+	})
+}
+
 func (dao *GORMInteractiveDAO) IncrReadCnt(ctx context.Context, biz string, bizId int64) error {
 	now := time.Now().UnixMilli()
 	return dao.db.WithContext(ctx).Clauses(clause.OnConflict{
diff --git a/webook/internal/repository/history.go b/webook/internal/repository/history.go
new file mode 100644
index 0000000..7bf7219
--- /dev/null
+++ b/webook/internal/repository/history.go
@@ -0,0 +1,10 @@
+package repository
+
+import (
+	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/domain"
+)
+
+type HistoryRecordRepository interface {
+	AddRecord(ctx context.Context, record domain.HistoryRecord) error
+}
diff --git a/webook/internal/repository/interactive.go b/webook/internal/repository/interactive.go
index 3a23beb..da2f473 100644
--- a/webook/internal/repository/interactive.go
+++ b/webook/internal/repository/interactive.go
@@ -2,27 +2,85 @@ package repository
 
 import (
 	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/domain"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/cache"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/dao"
+	"gitee.com/geekbang/basic-go/webook/pkg/logger"
 )
 
 type InteractiveRepository interface {
 	IncrReadCnt(ctx context.Context, biz string, bizId int64) error
+	// BatchIncrReadCnt biz 和 bizId 长度必须一致
+	BatchIncrReadCnt(ctx context.Context, biz []string, bizId []int64) error
 	IncrLike(ctx context.Context, biz string, id int64, uid int64) error
 	DecrLike(ctx context.Context, biz string, id int64, uid int64) error
 	AddCollectionItem(ctx context.Context, biz string, id int64, cid int64, uid int64) error
+	Get(ctx context.Context, biz string, id int64) (domain.Interactive, error)
+	Liked(ctx context.Context, biz string, id int64, uid int64) (bool, error)
+	Collected(ctx context.Context, biz string, id int64, uid int64) (bool, error)
 }
 
 type CachedInteractiveRepository struct {
 	dao   dao.InteractiveDAO
 	cache cache.InteractiveCache
+	l     logger.LoggerV1
 }
 
 func NewCachedInteractiveRepository(dao dao.InteractiveDAO,
+	l logger.LoggerV1,
 	cache cache.InteractiveCache) InteractiveRepository {
 	return &CachedInteractiveRepository{dao: dao, cache: cache}
 }
 
+func (c *CachedInteractiveRepository) Get(ctx context.Context, biz string, id int64) (domain.Interactive, error) {
+	intr, err := c.cache.Get(ctx, biz, id)
+	if err == nil {
+		return intr, nil
+	}
+	ie, err := c.dao.Get(ctx, biz, id)
+	if err != nil {
+		return domain.Interactive{}, err
+	}
+	if err == nil {
+		res := c.toDomain(ie)
+		err = c.cache.Set(ctx, biz, id, res)
+		if err != nil {
+			c.l.Error("回写缓存失败",
+				logger.String("biz", biz),
+				logger.Int64("bizId", id),
+				logger.Error(err))
+		}
+		return res, nil
+	}
+	return intr, err
+}
+
+func (c *CachedInteractiveRepository) Liked(ctx context.Context,
+	biz string, id int64, uid int64) (bool, error) {
+	_, err := c.dao.GetLikeInfo(ctx, biz, id, uid)
+	switch err {
+	case nil:
+		return true, nil
+	case dao.ErrRecordNotFound:
+		return false, nil
+	default:
+		return false, err
+	}
+}
+
+func (c *CachedInteractiveRepository) Collected(ctx context.Context,
+	biz string, id int64, uid int64) (bool, error) {
+	_, err := c.dao.GetCollectInfo(ctx, biz, id, uid)
+	switch err {
+	case nil:
+		return true, nil
+	case dao.ErrRecordNotFound:
+		return false, nil
+	default:
+		return false, err
+	}
+}
+
 func (c *CachedInteractiveRepository) AddCollectionItem(ctx context.Context,
 	biz string, id int64, cid int64, uid int64) error {
 	err := c.dao.InsertCollectionBiz(ctx, dao.UserCollectionBiz{
@@ -53,6 +111,22 @@ func (c *CachedInteractiveRepository) DecrLike(ctx context.Context, biz string,
 	return c.cache.DecrLikeCntIfPresent(ctx, biz, id)
 }
 
+func (c *CachedInteractiveRepository) BatchIncrReadCnt(ctx context.Context, biz []string, bizId []int64) error {
+	err := c.dao.BatchIncrReadCnt(ctx, biz, bizId)
+	if err != nil {
+		return err
+	}
+	go func() {
+		for i := 0; i < len(biz); i++ {
+			er := c.cache.IncrReadCntIfPresent(ctx, biz[i], bizId[i])
+			if er != nil {
+				// 记录日志
+			}
+		}
+	}()
+	return nil
+}
+
 func (c *CachedInteractiveRepository) IncrReadCnt(ctx context.Context, biz string, bizId int64) error {
 	err := c.dao.IncrReadCnt(ctx, biz, bizId)
 	if err != nil {
@@ -62,3 +136,11 @@ func (c *CachedInteractiveRepository) IncrReadCnt(ctx context.Context, biz strin
 	// 部分失败问题 —— 数据不一致
 	return c.cache.IncrReadCntIfPresent(ctx, biz, bizId)
 }
+
+func (c *CachedInteractiveRepository) toDomain(ie dao.Interactive) domain.Interactive {
+	return domain.Interactive{
+		ReadCnt:    ie.ReadCnt,
+		LikeCnt:    ie.LikeCnt,
+		CollectCnt: ie.CollectCnt,
+	}
+}
diff --git a/webook/internal/service/article.go b/webook/internal/service/article.go
index 03f8296..07b48f7 100644
--- a/webook/internal/service/article.go
+++ b/webook/internal/service/article.go
@@ -4,6 +4,7 @@ import (
 	"context"
 	"errors"
 	"gitee.com/geekbang/basic-go/webook/internal/domain"
+	"gitee.com/geekbang/basic-go/webook/internal/events/article"
 	"gitee.com/geekbang/basic-go/webook/internal/repository"
 	"gitee.com/geekbang/basic-go/webook/pkg/logger"
 )
@@ -15,11 +16,12 @@ type ArticleService interface {
 	Withdraw(ctx context.Context, uid int64, id int64) error
 	GetByAuthor(ctx context.Context, uid int64, offset int, limit int) ([]domain.Article, error)
 	GetById(ctx context.Context, id int64) (domain.Article, error)
-	GetPubById(ctx context.Context, id int64) (domain.Article, error)
+	GetPubById(ctx context.Context, id, uid int64) (domain.Article, error)
 }
 
 type articleService struct {
-	repo repository.ArticleRepository
+	repo     repository.ArticleRepository
+	producer article.Producer
 
 	// V1 写法专用
 	readerRepo repository.ArticleReaderRepository
@@ -27,8 +29,25 @@ type articleService struct {
 	l          logger.LoggerV1
 }
 
-func (a *articleService) GetPubById(ctx context.Context, id int64) (domain.Article, error) {
-	return a.repo.GetPubById(ctx, id)
+func (a *articleService) GetPubById(ctx context.Context, id, uid int64) (domain.Article, error) {
+	res, err := a.repo.GetPubById(ctx, id)
+	go func() {
+		if err == nil {
+			// 在这里发一个消息
+			er := a.producer.ProduceReadEvent(article.ReadEvent{
+				Aid: id,
+				Uid: uid,
+			})
+			if er != nil {
+				a.l.Error("发送 ReadEvent 失败",
+					logger.Int64("aid", id),
+					logger.Int64("uid", uid),
+					logger.Error(err))
+			}
+		}
+	}()
+
+	return res, err
 }
 
 func (a *articleService) GetById(ctx context.Context, id int64) (domain.Article, error) {
@@ -94,9 +113,11 @@ func NewArticleServiceV1(
 	}
 }
 
-func NewArticleService(repo repository.ArticleRepository) ArticleService {
+func NewArticleService(repo repository.ArticleRepository,
+	producer article.Producer) ArticleService {
 	return &articleService{
-		repo: repo,
+		repo:     repo,
+		producer: producer,
 	}
 }
 
diff --git a/webook/internal/service/interactive.go b/webook/internal/service/interactive.go
index e15bbe0..c576728 100644
--- a/webook/internal/service/interactive.go
+++ b/webook/internal/service/interactive.go
@@ -2,7 +2,9 @@ package service
 
 import (
 	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/domain"
 	"gitee.com/geekbang/basic-go/webook/internal/repository"
+	"golang.org/x/sync/errgroup"
 )
 
 type InteractiveService interface {
@@ -10,12 +12,33 @@ type InteractiveService interface {
 	Like(c context.Context, biz string, id int64, uid int64) error
 	CancelLike(c context.Context, biz string, id int64, uid int64) error
 	Collect(ctx context.Context, biz string, bizId, cid, uid int64) error
+	Get(ctx context.Context, biz string, id int64, uid int64) (domain.Interactive, error)
 }
 
 type interactiveService struct {
 	repo repository.InteractiveRepository
 }
 
+func (i *interactiveService) Get(ctx context.Context, biz string, id int64, uid int64) (domain.Interactive, error) {
+	intr, err := i.repo.Get(ctx, biz, id)
+	if err != nil {
+		return domain.Interactive{}, err
+	}
+	var eg errgroup.Group
+	eg.Go(func() error {
+		var er error
+		intr.Liked, er = i.repo.Liked(ctx, biz, id, uid)
+		return er
+	})
+
+	eg.Go(func() error {
+		var er error
+		intr.Collected, er = i.repo.Collected(ctx, biz, id, uid)
+		return er
+	})
+	return intr, eg.Wait()
+}
+
 func (i *interactiveService) Collect(ctx context.Context, biz string, bizId, cid, uid int64) error {
 	return i.repo.AddCollectionItem(ctx, biz, bizId, cid, uid)
 }
diff --git a/webook/internal/service/oauth2/wechat/prometheus/prometheus.go b/webook/internal/service/oauth2/wechat/prometheus/prometheus.go
new file mode 100644
index 0000000..b9f3548
--- /dev/null
+++ b/webook/internal/service/oauth2/wechat/prometheus/prometheus.go
@@ -0,0 +1,30 @@
+package prometheus
+
+import (
+	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/domain"
+	"gitee.com/geekbang/basic-go/webook/internal/service/oauth2/wechat"
+	"github.com/prometheus/client_golang/prometheus"
+	"time"
+)
+
+type Decorator struct {
+	wechat.Service
+	sum prometheus.Summary
+}
+
+func NewDecorator(svc wechat.Service, sum prometheus.Summary) *Decorator {
+	return &Decorator{
+		Service: svc,
+		sum:     sum,
+	}
+}
+
+func (d *Decorator) VerifyCode(ctx context.Context, code string) (domain.WechatInfo, error) {
+	start := time.Now()
+	defer func() {
+		duration := time.Since(start).Milliseconds()
+		d.sum.Observe(float64(duration))
+	}()
+	return d.Service.VerifyCode(ctx, code)
+}
diff --git a/webook/internal/service/sms/opentelemetry/opentelemetry.go b/webook/internal/service/sms/opentelemetry/opentelemetry.go
new file mode 100644
index 0000000..8083dd5
--- /dev/null
+++ b/webook/internal/service/sms/opentelemetry/opentelemetry.go
@@ -0,0 +1,29 @@
+package opentelemetry
+
+import (
+	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/service/sms"
+	"go.opentelemetry.io/otel/attribute"
+	"go.opentelemetry.io/otel/trace"
+)
+
+type Decorator struct {
+	svc    sms.Service
+	tracer trace.Tracer
+}
+
+func NewDecorator(svc sms.Service, tracer trace.Tracer) *Decorator {
+	return &Decorator{svc: svc, tracer: tracer}
+}
+
+func (d *Decorator) Send(ctx context.Context, tplId string, args []string, numbers ...string) error {
+	ctx, span := d.tracer.Start(ctx, "sms")
+	defer span.End()
+	span.SetAttributes(attribute.String("tpl", tplId))
+	span.AddEvent("发短信")
+	err := d.svc.Send(ctx, tplId, args, numbers...)
+	if err != nil {
+		span.RecordError(err)
+	}
+	return err
+}
diff --git a/webook/internal/service/sms/prometheus/prometheus.go b/webook/internal/service/sms/prometheus/prometheus.go
new file mode 100644
index 0000000..ce970a1
--- /dev/null
+++ b/webook/internal/service/sms/prometheus/prometheus.go
@@ -0,0 +1,30 @@
+package prometheus
+
+import (
+	"context"
+	"gitee.com/geekbang/basic-go/webook/internal/service/sms"
+	"github.com/prometheus/client_golang/prometheus"
+	"time"
+)
+
+type Decorator struct {
+	svc    sms.Service
+	vector *prometheus.SummaryVec
+}
+
+func NewDecorator(svc sms.Service, opt prometheus.SummaryOpts) *Decorator {
+	return &Decorator{
+		svc:    svc,
+		vector: prometheus.NewSummaryVec(opt, []string{"tpl_id"}),
+	}
+}
+
+func (d *Decorator) Send(ctx context.Context,
+	tplId string, args []string, numbers ...string) error {
+	start := time.Now()
+	defer func() {
+		duration := time.Since(start).Milliseconds()
+		d.vector.WithLabelValues(tplId).Observe(float64(duration))
+	}()
+	return d.svc.Send(ctx, tplId, args, numbers...)
+}
diff --git a/webook/internal/web/article.go b/webook/internal/web/article.go
index d989256..68d5580 100644
--- a/webook/internal/web/article.go
+++ b/webook/internal/web/article.go
@@ -1,13 +1,15 @@
 package web
 
 import (
-	"context"
+	"fmt"
 	"gitee.com/geekbang/basic-go/webook/internal/domain"
 	"gitee.com/geekbang/basic-go/webook/internal/service"
 	"gitee.com/geekbang/basic-go/webook/internal/web/jwt"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx"
 	"gitee.com/geekbang/basic-go/webook/pkg/logger"
 	"github.com/ecodeclub/ekit/slice"
 	"github.com/gin-gonic/gin"
+	"golang.org/x/sync/errgroup"
 	"net/http"
 	"strconv"
 	"time"
@@ -35,9 +37,9 @@ func (h *ArticleHandler) RegisterRoutes(server *gin.Engine) {
 	g := server.Group("/articles")
 
 	//g.PUT("/", h.Edit)
-	g.POST("/edit", h.Edit)
-	g.POST("/publish", h.Publish)
-	g.POST("/withdraw", h.Withdraw)
+	g.POST("/edit", ginx.WrapBodyAndClaims(h.Edit))
+	g.POST("/publish", ginx.WrapBodyAndClaims(h.Publish))
+	g.POST("/withdraw", ginx.WrapBodyAndClaims(h.Withdraw))
 
 	// 创作者接口
 	g.GET("/detail/:id", h.Detail)
@@ -48,22 +50,13 @@ func (h *ArticleHandler) RegisterRoutes(server *gin.Engine) {
 	pub := g.Group("/pub")
 	pub.GET("/:id", h.PubDetail)
 	// 传入一个参数，true 就是点赞, false 就是不点赞
-	pub.POST("/like", h.Like)
-	pub.POST("/collect", h.Collect)
+	pub.POST("/like", ginx.WrapBodyAndClaims(h.Like))
+	pub.POST("/collect", ginx.WrapBodyAndClaims(h.Collect))
 }
 
 // Edit 接收 Article 输入，返回一个 ID，文章的 ID
-func (h *ArticleHandler) Edit(ctx *gin.Context) {
-	type Req struct {
-		Id      int64
-		Title   string `json:"title"`
-		Content string `json:"content"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
-	uc := ctx.MustGet("user").(jwt.UserClaims)
+func (h *ArticleHandler) Edit(ctx *gin.Context,
+	req ArticleEditReq, uc jwt.UserClaims) (ginx.Result, error) {
 	id, err := h.svc.Save(ctx, domain.Article{
 		Id:      req.Id,
 		Title:   req.Title,
@@ -73,29 +66,18 @@ func (h *ArticleHandler) Edit(ctx *gin.Context) {
 		},
 	})
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Msg: "系统错误",
-		})
-		h.l.Error("保存文章数据失败",
-			logger.Int64("uid", uc.Uid),
-			logger.Error(err))
-		return
+		}, err
 	}
-	ctx.JSON(http.StatusOK, Result{
+	return ginx.Result{
 		Data: id,
-	})
+	}, nil
 }
 
-func (h *ArticleHandler) Publish(ctx *gin.Context) {
-	type Req struct {
-		Id      int64
-		Title   string `json:"title"`
-		Content string `json:"content"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
+func (h *ArticleHandler) Publish(ctx *gin.Context,
+	req PublishReq,
+	uc jwt.UserClaims) (ginx.Result, error) {
 	//val, ok := ctx.Get("user")
 	//if !ok {
 	//	ctx.JSON(http.StatusOK, Result{
@@ -104,7 +86,6 @@ func (h *ArticleHandler) Publish(ctx *gin.Context) {
 	//	})
 	//	return
 	//}
-	uc := ctx.MustGet("user").(jwt.UserClaims)
 	id, err := h.svc.Publish(ctx, domain.Article{
 		Id:      req.Id,
 		Title:   req.Title,
@@ -114,44 +95,28 @@ func (h *ArticleHandler) Publish(ctx *gin.Context) {
 		},
 	})
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Msg:  "系统错误",
 			Code: 5,
-		})
-		h.l.Error("发表文章失败",
-			logger.Int64("uid", uc.Uid),
-			logger.Error(err))
-		return
+		}, fmt.Errorf("发表文章失败 aid %d, uid %d %w", uc.Uid, req.Id, err)
 	}
-	ctx.JSON(http.StatusOK, Result{
+	return ginx.Result{
 		Data: id,
-	})
+	}, nil
 }
 
-func (h *ArticleHandler) Withdraw(ctx *gin.Context) {
-	type Req struct {
-		Id int64
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
-	uc := ctx.MustGet("user").(jwt.UserClaims)
+func (h *ArticleHandler) Withdraw(ctx *gin.Context,
+	req ArticleWithdrawReq, uc jwt.UserClaims) (ginx.Result, error) {
 	err := h.svc.Withdraw(ctx, uc.Uid, req.Id)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Msg:  "系统错误",
 			Code: 5,
-		})
-		h.l.Error("撤回文章失败",
-			logger.Int64("uid", uc.Uid),
-			logger.Int64("aid", req.Id),
-			logger.Error(err))
-		return
+		}, err
 	}
-	ctx.JSON(http.StatusOK, Result{
+	return ginx.Result{
 		Msg: "OK",
-	})
+	}, nil
 }
 
 func (h *ArticleHandler) List(ctx *gin.Context) {
@@ -163,7 +128,7 @@ func (h *ArticleHandler) List(ctx *gin.Context) {
 	uc := ctx.MustGet("user").(jwt.UserClaims)
 	arts, err := h.svc.GetByAuthor(ctx, uc.Uid, page.Offset, page.Limit)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Code: 5,
 			Msg:  "系统错误",
 		})
@@ -174,7 +139,7 @@ func (h *ArticleHandler) List(ctx *gin.Context) {
 			logger.Int64("uid", uc.Uid))
 		return
 	}
-	ctx.JSON(http.StatusOK, Result{
+	ctx.JSON(http.StatusOK, ginx.Result{
 		Data: slice.Map[domain.Article, ArticleVo](arts, func(idx int, src domain.Article) ArticleVo {
 			return ArticleVo{
 				Id:       src.Id,
@@ -196,7 +161,7 @@ func (h *ArticleHandler) Detail(ctx *gin.Context) {
 	idstr := ctx.Param("id")
 	id, err := strconv.ParseInt(idstr, 10, 64)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "id 参数错误",
 			Code: 4,
 		})
@@ -207,7 +172,7 @@ func (h *ArticleHandler) Detail(ctx *gin.Context) {
 	}
 	art, err := h.svc.GetById(ctx, id)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "系统错误",
 			Code: 5,
 		})
@@ -219,7 +184,7 @@ func (h *ArticleHandler) Detail(ctx *gin.Context) {
 	uc := ctx.MustGet("user").(jwt.UserClaims)
 	if art.Author.Id != uc.Uid {
 		// 有人在搞鬼
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "系统错误",
 			Code: 5,
 		})
@@ -241,14 +206,14 @@ func (h *ArticleHandler) Detail(ctx *gin.Context) {
 		Ctime:  art.Ctime.Format(time.DateTime),
 		Utime:  art.Utime.Format(time.DateTime),
 	}
-	ctx.JSON(http.StatusOK, Result{Data: vo})
+	ctx.JSON(http.StatusOK, ginx.Result{Data: vo})
 }
 
 func (h *ArticleHandler) PubDetail(ctx *gin.Context) {
 	idstr := ctx.Param("id")
 	id, err := strconv.ParseInt(idstr, 10, 64)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "id 参数错误",
 			Code: 4,
 		})
@@ -258,31 +223,52 @@ func (h *ArticleHandler) PubDetail(ctx *gin.Context) {
 		return
 	}
 
-	art, err := h.svc.GetPubById(ctx, id)
+	var (
+		eg   errgroup.Group
+		art  domain.Article
+		intr domain.Interactive
+	)
+
+	uc := ctx.MustGet("user").(jwt.UserClaims)
+	eg.Go(func() error {
+		var er error
+		art, er = h.svc.GetPubById(ctx, id, uc.Uid)
+		return er
+	})
+	eg.Go(func() error {
+		var er error
+		intr, er = h.intrSvc.Get(ctx, h.biz, id, uc.Uid)
+		return er
+	})
+
+	// 等待结果
+	err = eg.Wait()
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "系统错误",
 			Code: 5,
 		})
 		h.l.Error("查询文章失败，系统错误",
+			logger.Int64("aid", id),
+			logger.Int64("uid", uc.Uid),
 			logger.Error(err))
 		return
 	}
 
-	go func() {
-		// 1. 如果你想摆脱原本主链路的超时控制，你就创建一个新的
-		// 2. 如果你不想，你就用 ctx
-		newCtx, cancel := context.WithTimeout(context.Background(), time.Second)
-		defer cancel()
-		er := h.intrSvc.IncrReadCnt(newCtx, h.biz, art.Id)
-		if er != nil {
-			h.l.Error("更新阅读数失败",
-				logger.Int64("aid", art.Id),
-				logger.Error(err))
-		}
-	}()
+	//go func() {
+	// 1. 如果你想摆脱原本主链路的超时控制，你就创建一个新的
+	// 2. 如果你不想，你就用 ctx
+	//newCtx, cancel := context.WithTimeout(context.Background(), time.Second)
+	//defer cancel()
+	//er := h.intrSvc.IncrReadCnt(newCtx, h.biz, art.Id)
+	//if er != nil {
+	//	h.l.Error("更新阅读数失败",
+	//		logger.Int64("aid", art.Id),
+	//		logger.Error(err))
+	//}
+	//}()
 
-	ctx.JSON(http.StatusOK, Result{
+	ctx.JSON(http.StatusOK, ginx.Result{
 		Data: ArticleVo{
 			Id:    art.Id,
 			Title: art.Title,
@@ -290,6 +276,11 @@ func (h *ArticleHandler) PubDetail(ctx *gin.Context) {
 			Content:    art.Content,
 			AuthorId:   art.Author.Id,
 			AuthorName: art.Author.Name,
+			ReadCnt:    intr.ReadCnt,
+			CollectCnt: intr.CollectCnt,
+			LikeCnt:    intr.LikeCnt,
+			Liked:      intr.Liked,
+			Collected:  intr.Collected,
 
 			Status: art.Status.ToUint8(),
 			Ctime:  art.Ctime.Format(time.DateTime),
@@ -298,17 +289,8 @@ func (h *ArticleHandler) PubDetail(ctx *gin.Context) {
 	})
 }
 
-func (h *ArticleHandler) Like(c *gin.Context) {
-	type Req struct {
-		Id int64 `json:"id"`
-		// true 是点赞，false 是不点赞
-		Like bool `json:"like"`
-	}
-	var req Req
-	if err := c.Bind(&req); err != nil {
-		return
-	}
-	uc := c.MustGet("user").(jwt.UserClaims)
+func (h *ArticleHandler) Like(c *gin.Context,
+	req ArticleLikeReq, uc jwt.UserClaims) (ginx.Result, error) {
 	var err error
 	if req.Like {
 		// 点赞
@@ -318,43 +300,24 @@ func (h *ArticleHandler) Like(c *gin.Context) {
 		err = h.intrSvc.CancelLike(c, h.biz, req.Id, uc.Uid)
 	}
 	if err != nil {
-		c.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 5, Msg: "系统错误",
-		})
-		h.l.Error("点赞/取消点赞失败",
-			logger.Error(err),
-			logger.Int64("uid", uc.Uid),
-			logger.Int64("aid", req.Id))
-		return
+		}, err
 	}
-	c.JSON(http.StatusOK, Result{
+	return ginx.Result{
 		Msg: "OK",
-	})
+	}, nil
 }
 
-func (h *ArticleHandler) Collect(ctx *gin.Context) {
-	type Req struct {
-		Id  int64 `json:"id"`
-		Cid int64 `json:"cid"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
-	uc := ctx.MustGet("user").(jwt.UserClaims)
-
+func (h *ArticleHandler) Collect(ctx *gin.Context,
+	req ArticleCollectReq, uc jwt.UserClaims) (ginx.Result, error) {
 	err := h.intrSvc.Collect(ctx, h.biz, req.Id, req.Cid, uc.Uid)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 5, Msg: "系统错误",
-		})
-		h.l.Error("收藏失败",
-			logger.Error(err),
-			logger.Int64("uid", uc.Uid),
-			logger.Int64("aid", req.Id))
-		return
+		}, err
 	}
-	ctx.JSON(http.StatusOK, Result{
+	return ginx.Result{
 		Msg: "OK",
-	})
+	}, nil
 }
diff --git a/webook/internal/web/article_test.go b/webook/internal/web/article_test.go
index 38f7a50..e2db881 100644
--- a/webook/internal/web/article_test.go
+++ b/webook/internal/web/article_test.go
@@ -8,6 +8,7 @@ import (
 	"gitee.com/geekbang/basic-go/webook/internal/service"
 	svcmocks "gitee.com/geekbang/basic-go/webook/internal/service/mocks"
 	ijwt "gitee.com/geekbang/basic-go/webook/internal/web/jwt"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx"
 	"gitee.com/geekbang/basic-go/webook/pkg/logger"
 	"github.com/gin-gonic/gin"
 	"github.com/stretchr/testify/assert"
@@ -24,7 +25,7 @@ func TestArticleHandler_Publish(t *testing.T) {
 
 		reqBody  string
 		wantCode int
-		wantRes  Result
+		wantRes  ginx.Result
 	}{
 		{
 			name: "新建并且发表成功",
@@ -46,7 +47,7 @@ func TestArticleHandler_Publish(t *testing.T) {
 }
 `,
 			wantCode: 200,
-			wantRes: Result{
+			wantRes: ginx.Result{
 				// 原本是 int64的，但是因为 Data 是any，所以在反序列化的时候，
 				// 用的 float64
 				Data: float64(1),
@@ -74,7 +75,7 @@ func TestArticleHandler_Publish(t *testing.T) {
 }
 `,
 			wantCode: 200,
-			wantRes: Result{
+			wantRes: ginx.Result{
 				// 原本是 int64的，但是因为 Data 是any，所以在反序列化的时候，
 				// 用的 float64
 				Data: float64(1),
@@ -117,7 +118,7 @@ func TestArticleHandler_Publish(t *testing.T) {
 }
 `,
 			wantCode: 200,
-			wantRes: Result{
+			wantRes: ginx.Result{
 				// 原本是 int64的，但是因为 Data 是any，所以在反序列化的时候，
 				// 用的 float64
 				Msg:  "系统错误",
@@ -158,7 +159,7 @@ func TestArticleHandler_Publish(t *testing.T) {
 			if recorder.Code != http.StatusOK {
 				return
 			}
-			var res Result
+			var res ginx.Result
 			err = json.NewDecoder(recorder.Body).Decode(&res)
 			assert.NoError(t, err)
 			assert.Equal(t, tc.wantRes, res)
diff --git a/webook/internal/web/article_vo.go b/webook/internal/web/article_vo.go
index 68a4d89..a15a18c 100644
--- a/webook/internal/web/article_vo.go
+++ b/webook/internal/web/article_vo.go
@@ -10,4 +10,37 @@ type ArticleVo struct {
 	Status     uint8  `json:"status,omitempty"`
 	Ctime      string `json:"ctime,omitempty"`
 	Utime      string `json:"utime,omitempty"`
+
+	ReadCnt    int64 `json:"readCnt"`
+	LikeCnt    int64 `json:"likeCnt"`
+	CollectCnt int64 `json:"collectCnt"`
+	Liked      bool  `json:"liked"`
+	Collected  bool  `json:"collected"`
+}
+
+type PublishReq struct {
+	Id      int64
+	Title   string `json:"title"`
+	Content string `json:"content"`
+}
+
+type ArticleEditReq struct {
+	Id      int64
+	Title   string `json:"title"`
+	Content string `json:"content"`
+}
+
+type ArticleWithdrawReq struct {
+	Id int64
+}
+
+type ArticleLikeReq struct {
+	Id int64 `json:"id"`
+	// true 是点赞，false 是不点赞
+	Like bool `json:"like"`
+}
+
+type ArticleCollectReq struct {
+	Id  int64 `json:"id"`
+	Cid int64 `json:"cid"`
 }
diff --git a/webook/internal/web/user.go b/webook/internal/web/user.go
index b5be194..d72723e 100644
--- a/webook/internal/web/user.go
+++ b/webook/internal/web/user.go
@@ -2,14 +2,14 @@ package web
 
 import (
 	"gitee.com/geekbang/basic-go/webook/internal/domain"
+	"gitee.com/geekbang/basic-go/webook/internal/errs"
 	"gitee.com/geekbang/basic-go/webook/internal/service"
 	ijwt "gitee.com/geekbang/basic-go/webook/internal/web/jwt"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx"
 	regexp "github.com/dlclark/regexp2"
 	"github.com/gin-contrib/sessions"
 	"github.com/gin-gonic/gin"
 	"github.com/golang-jwt/jwt/v5"
-	"go.uber.org/zap"
-	"log"
 	"net/http"
 	"time"
 )
@@ -48,185 +48,165 @@ func (h *UserHandler) RegisterRoutes(server *gin.Engine) {
 	//server.GET("/users/:username", h.Profile)
 	ug := server.Group("/users")
 	// POST /users/signup
-	ug.POST("/signup", h.SignUp)
+	ug.POST("/signup", ginx.WrapBody(h.SignUp))
 	// POST /users/login
 	//ug.POST("/login", h.Login)
-	ug.POST("/login", h.LoginJWT)
+	ug.POST("/login", ginx.WrapBody(h.LoginJWT))
 	ug.POST("/logout", h.LogoutJWT)
 	// POST /users/edit
-	ug.POST("/edit", h.Edit)
+	ug.POST("/edit", ginx.WrapBodyAndClaims(h.Edit))
 	// GET /users/profile
-	ug.GET("/profile", h.Profile)
+	ug.GET("/profile", ginx.WrapClaims(h.Profile))
 	ug.GET("/refresh_token", h.RefreshToken)
 
 	// 手机验证码登录相关功能
-	ug.POST("/login_sms/code/send", h.SendSMSLoginCode)
-	ug.POST("/login_sms", h.LoginSMS)
+	ug.POST("/login_sms/code/send", ginx.WrapBody(h.SendSMSLoginCode))
+	ug.POST("/login_sms", ginx.WrapBody(h.LoginSMS))
 }
 
-func (h *UserHandler) LoginSMS(ctx *gin.Context) {
-	type Req struct {
-		Phone string `json:"phone"`
-		Code  string `json:"code"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
-
+func (h *UserHandler) LoginSMS(ctx *gin.Context,
+	req LoginSMSReq) (ginx.Result, error) {
 	ok, err := h.codeSvc.Verify(ctx, bizLogin, req.Phone, req.Code)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 5,
 			Msg:  "系统异常",
 			//Msg: err.Error(),
-		})
-		zap.L().Error("手机验证码验证失败",
-			// 在生产环境绝对不能打
-			// 开发环境你可以随便打
-			//zap.String("phone", req.Phone),
-			zap.Error(err))
-		return
+		}, err
 	}
 	if !ok {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 4,
 			Msg:  "验证码不对，请重新输入",
-		})
-		return
+		}, nil
 	}
 	u, err := h.svc.FindOrCreate(ctx, req.Phone)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 5,
 			Msg:  "系统错误",
-		})
-		return
+		}, err
 	}
 	err = h.SetLoginToken(ctx, u.Id)
 	if err != nil {
-		ctx.String(http.StatusOK, "系统错误")
-		return
+		return ginx.Result{
+			Code: 5,
+			Msg:  "系统错误",
+		}, err
 	}
-	ctx.JSON(http.StatusOK, Result{
+	return ginx.Result{
 		Msg: "登录成功",
-	})
+	}, nil
 }
 
-func (h *UserHandler) SendSMSLoginCode(ctx *gin.Context) {
-	type Req struct {
-		Phone string `json:"phone"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
+func (h *UserHandler) SendSMSLoginCode(ctx *gin.Context,
+	req SendSMSCodeReq) (ginx.Result, error) {
 	// 你这边可以校验 Req
 	if req.Phone == "" {
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 4,
 			Msg:  "请输入手机号码",
-		})
-		return
+		}, nil
 	}
 	err := h.codeSvc.Send(ctx, bizLogin, req.Phone)
 	switch err {
 	case nil:
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Msg: "发送成功",
-		})
+		}, nil
 	case service.ErrCodeSendTooMany:
 		// 事实上，防不住有人不知道怎么触发了
 		// 少数这种错误，是可以接受的
 		// 但是频繁出现，就代表有人在搞你的系统
-		zap.L().Warn("频繁发送验证码")
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 4,
 			Msg:  "短信发送太频繁，请稍后再试",
-		})
+		}, nil
 	default:
-		ctx.JSON(http.StatusOK, Result{
+		return ginx.Result{
 			Code: 5,
 			Msg:  "系统错误",
-		})
-		// 补日志的
-		log.Println(err)
+		}, err
 	}
 }
 
-func (h *UserHandler) SignUp(ctx *gin.Context) {
-	type SignUpReq struct {
-		Email           string `json:"email"`
-		Password        string `json:"password"`
-		ConfirmPassword string `json:"confirmPassword"`
-	}
-
-	var req SignUpReq
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
-
+func (h *UserHandler) SignUp(ctx *gin.Context, req SignUpReq) (ginx.Result, error) {
 	isEmail, err := h.emailRexExp.MatchString(req.Email)
 	if err != nil {
 		ctx.String(http.StatusOK, "系统错误")
-		return
+		return ginx.Result{
+			Code: errs.UserInternalServerError,
+			Msg:  "系统错误",
+		}, err
 	}
 	if !isEmail {
-		ctx.String(http.StatusOK, "非法邮箱格式")
-		return
+		return ginx.Result{
+			Code: errs.UserInvalidInput,
+			Msg:  "非法邮箱格式",
+		}, nil
 	}
 
 	if req.Password != req.ConfirmPassword {
-		ctx.String(http.StatusOK, "两次输入密码不对")
-		return
+		return ginx.Result{
+			Code: errs.UserInvalidInput,
+			Msg:  "两次输入的密码不相等",
+		}, nil
 	}
 
 	isPassword, err := h.passwordRexExp.MatchString(req.Password)
 	if err != nil {
-		ctx.String(http.StatusOK, "系统错误")
-		return
+		return ginx.Result{
+			Code: errs.UserInternalServerError,
+			Msg:  "系统错误",
+		}, err
 	}
 	if !isPassword {
-		ctx.String(http.StatusOK, "密码必须包含字母、数字、特殊字符，并且不少于八位")
-		return
+		return ginx.Result{
+			Code: errs.UserInvalidInput,
+			Msg:  "密码必须包含字母、数字、特殊字符",
+		}, nil
 	}
 
-	err = h.svc.Signup(ctx, domain.User{
+	err = h.svc.Signup(ctx.Request.Context(), domain.User{
 		Email:    req.Email,
 		Password: req.Password,
 	})
 	switch err {
 	case nil:
-		ctx.String(http.StatusOK, "注册成功")
+		return ginx.Result{
+			Msg: "OK",
+		}, nil
 	case service.ErrDuplicateEmail:
-		ctx.String(http.StatusOK, "邮箱冲突，请换一个")
+		return ginx.Result{
+			Code: errs.UserDuplicateEmail,
+			Msg:  "邮箱冲突",
+		}, nil
 	default:
-		ctx.String(http.StatusOK, "系统错误")
+		return ginx.Result{
+			Code: errs.UserInternalServerError,
+			Msg:  "系统错误",
+		}, err
 	}
 }
 
-func (h *UserHandler) LoginJWT(ctx *gin.Context) {
-	type Req struct {
-		Email    string `json:"email"`
-		Password string `json:"password"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
+func (h *UserHandler) LoginJWT(ctx *gin.Context, req LoginJWTReq) (ginx.Result, error) {
 	u, err := h.svc.Login(ctx, req.Email, req.Password)
 	switch err {
 	case nil:
 		err = h.SetLoginToken(ctx, u.Id)
 		if err != nil {
-			ctx.String(http.StatusOK, "系统错误")
-			return
+			return ginx.Result{
+				Code: 5,
+				Msg:  "系统错误",
+			}, err
 		}
-		ctx.String(http.StatusOK, "登录成功")
+		return ginx.Result{
+			Msg: "OK",
+		}, nil
 	case service.ErrInvalidUserOrPassword:
-		ctx.String(http.StatusOK, "用户名或者密码不对")
+		return ginx.Result{Msg: "用户名或者密码错误"}, nil
 	default:
-		ctx.String(http.StatusOK, "系统错误")
+		return ginx.Result{Msg: "系统错误"}, err
 	}
 }
 
@@ -269,34 +249,18 @@ func (h *UserHandler) Login(ctx *gin.Context) {
 	}
 }
 
-func (h *UserHandler) Edit(ctx *gin.Context) {
+func (h *UserHandler) Edit(ctx *gin.Context, req UserEditReq,
+	uc ijwt.UserClaims) (ginx.Result, error) {
 	// 嵌入一段刷新过期时间的代码
-	type Req struct {
-		// 改邮箱，密码，或者能不能改手机号
-
-		Nickname string `json:"nickname"`
-		// YYYY-MM-DD
-		Birthday string `json:"birthday"`
-		AboutMe  string `json:"aboutMe"`
-	}
-	var req Req
-	if err := ctx.Bind(&req); err != nil {
-		return
-	}
 	//sess := sessions.Default(ctx)
 	//sess.Get("uid")
-	uc, ok := ctx.MustGet("user").(ijwt.UserClaims)
-	if !ok {
-		//ctx.String(http.StatusOK, "系统错误")
-		ctx.AbortWithStatus(http.StatusUnauthorized)
-		return
-	}
 	// 用户输入不对
 	birthday, err := time.Parse(time.DateOnly, req.Birthday)
 	if err != nil {
-		//ctx.String(http.StatusOK, "系统错误")
-		ctx.String(http.StatusOK, "生日格式不对")
-		return
+		return ginx.Result{
+			Code: 4,
+			Msg:  "生日格式不对",
+		}, err
 	}
 	err = h.svc.UpdateNonSensitiveInfo(ctx, domain.User{
 		Id:       uc.Uid,
@@ -305,27 +269,26 @@ func (h *UserHandler) Edit(ctx *gin.Context) {
 		AboutMe:  req.AboutMe,
 	})
 	if err != nil {
-		ctx.String(http.StatusOK, "系统异常")
-		return
+		return ginx.Result{
+			Code: 5,
+			Msg:  "系统错误",
+		}, err
 	}
-	ctx.String(http.StatusOK, "更新成功")
+	return ginx.Result{
+		Msg: "OK",
+	}, nil
 }
 
-func (h *UserHandler) Profile(ctx *gin.Context) {
+func (h *UserHandler) Profile(ctx *gin.Context,
+	uc ijwt.UserClaims) (ginx.Result, error) {
 	//us := ctx.MustGet("user").(UserClaims)
 	//ctx.String(http.StatusOK, "这是 profile")
-	// 嵌入一段刷新过期时间的代码
-
-	uc, ok := ctx.MustGet("user").(ijwt.UserClaims)
-	if !ok {
-		//ctx.String(http.StatusOK, "系统错误")
-		ctx.AbortWithStatus(http.StatusUnauthorized)
-		return
-	}
 	u, err := h.svc.FindById(ctx, uc.Uid)
 	if err != nil {
-		ctx.String(http.StatusOK, "系统异常")
-		return
+		return ginx.Result{
+			Code: 5,
+			Msg:  "系统错误",
+		}, err
 	}
 	type User struct {
 		Nickname string `json:"nickname"`
@@ -333,12 +296,14 @@ func (h *UserHandler) Profile(ctx *gin.Context) {
 		AboutMe  string `json:"aboutMe"`
 		Birthday string `json:"birthday"`
 	}
-	ctx.JSON(http.StatusOK, User{
-		Nickname: u.Nickname,
-		Email:    u.Email,
-		AboutMe:  u.AboutMe,
-		Birthday: u.Birthday.Format(time.DateOnly),
-	})
+	return ginx.Result{
+		Data: User{
+			Nickname: u.Nickname,
+			Email:    u.Email,
+			AboutMe:  u.AboutMe,
+			Birthday: u.Birthday.Format(time.DateOnly),
+		},
+	}, nil
 }
 
 func (h *UserHandler) RefreshToken(ctx *gin.Context) {
@@ -369,7 +334,7 @@ func (h *UserHandler) RefreshToken(ctx *gin.Context) {
 		ctx.AbortWithStatus(http.StatusUnauthorized)
 		return
 	}
-	ctx.JSON(http.StatusOK, Result{
+	ctx.JSON(http.StatusOK, ginx.Result{
 		Msg: "OK",
 	})
 }
@@ -377,8 +342,8 @@ func (h *UserHandler) RefreshToken(ctx *gin.Context) {
 func (h *UserHandler) LogoutJWT(ctx *gin.Context) {
 	err := h.ClearToken(ctx)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{Code: 5, Msg: "系统错误"})
+		ctx.JSON(http.StatusOK, ginx.Result{Code: 5, Msg: "系统错误"})
 		return
 	}
-	ctx.JSON(http.StatusOK, Result{Msg: "退出登录成功"})
+	ctx.JSON(http.StatusOK, ginx.Result{Msg: "退出登录成功"})
 }
diff --git a/webook/internal/web/user_vo.go b/webook/internal/web/user_vo.go
new file mode 100644
index 0000000..093ca8c
--- /dev/null
+++ b/webook/internal/web/user_vo.go
@@ -0,0 +1,30 @@
+package web
+
+type LoginSMSReq struct {
+	Phone string `json:"phone"`
+	Code  string `json:"code"`
+}
+
+type SignUpReq struct {
+	Email           string `json:"email"`
+	Password        string `json:"password"`
+	ConfirmPassword string `json:"confirmPassword"`
+}
+
+type LoginJWTReq struct {
+	Email    string `json:"email"`
+	Password string `json:"password"`
+}
+
+type UserEditReq struct {
+	// 改邮箱，密码，或者能不能改手机号
+
+	Nickname string `json:"nickname"`
+	// YYYY-MM-DD
+	Birthday string `json:"birthday"`
+	AboutMe  string `json:"aboutMe"`
+}
+
+type SendSMSCodeReq struct {
+	Phone string `json:"phone"`
+}
diff --git a/webook/internal/web/wechat.go b/webook/internal/web/wechat.go
index 7fef758..a987e7b 100644
--- a/webook/internal/web/wechat.go
+++ b/webook/internal/web/wechat.go
@@ -5,6 +5,7 @@ import (
 	"gitee.com/geekbang/basic-go/webook/internal/service"
 	"gitee.com/geekbang/basic-go/webook/internal/service/oauth2/wechat"
 	ijwt "gitee.com/geekbang/basic-go/webook/internal/web/jwt"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx"
 	"github.com/gin-gonic/gin"
 	"github.com/golang-jwt/jwt/v5"
 	uuid "github.com/lithammer/shortuuid/v4"
@@ -41,7 +42,7 @@ func (o *OAuth2WechatHandler) Auth2URL(ctx *gin.Context) {
 	state := uuid.New()
 	val, err := o.svc.AuthURL(ctx, state)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "构造跳转URL失败",
 			Code: 5,
 		})
@@ -49,12 +50,12 @@ func (o *OAuth2WechatHandler) Auth2URL(ctx *gin.Context) {
 	}
 	err = o.setStateCookie(ctx, state)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "服务器异常",
 			Code: 5,
 		})
 	}
-	ctx.JSON(http.StatusOK, Result{
+	ctx.JSON(http.StatusOK, ginx.Result{
 		Data: val,
 	})
 }
@@ -62,7 +63,7 @@ func (o *OAuth2WechatHandler) Auth2URL(ctx *gin.Context) {
 func (o *OAuth2WechatHandler) Callback(ctx *gin.Context) {
 	err := o.verifyState(ctx)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "非法请求",
 			Code: 4,
 		})
@@ -73,7 +74,7 @@ func (o *OAuth2WechatHandler) Callback(ctx *gin.Context) {
 	// state := ctx.Query("state")
 	wechatInfo, err := o.svc.VerifyCode(ctx, code)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "授权码有误",
 			Code: 4,
 		})
@@ -81,7 +82,7 @@ func (o *OAuth2WechatHandler) Callback(ctx *gin.Context) {
 	}
 	u, err := o.userSvc.FindOrCreateByWechat(ctx, wechatInfo)
 	if err != nil {
-		ctx.JSON(http.StatusOK, Result{
+		ctx.JSON(http.StatusOK, ginx.Result{
 			Msg:  "系统错误",
 			Code: 5,
 		})
@@ -92,7 +93,7 @@ func (o *OAuth2WechatHandler) Callback(ctx *gin.Context) {
 		ctx.String(http.StatusOK, "系统错误")
 		return
 	}
-	ctx.JSON(http.StatusOK, Result{
+	ctx.JSON(http.StatusOK, ginx.Result{
 		Msg: "OK",
 	})
 	return
diff --git a/webook/ioc/db.go b/webook/ioc/db.go
index fd46746..5824e13 100644
--- a/webook/ioc/db.go
+++ b/webook/ioc/db.go
@@ -2,11 +2,14 @@ package ioc
 
 import (
 	"gitee.com/geekbang/basic-go/webook/internal/repository/dao"
+	"gitee.com/geekbang/basic-go/webook/pkg/gormx"
 	"gitee.com/geekbang/basic-go/webook/pkg/logger"
+	prometheus2 "github.com/prometheus/client_golang/prometheus"
 	"github.com/spf13/viper"
 	"gorm.io/driver/mysql"
 	"gorm.io/gorm"
-	glogger "gorm.io/gorm/logger"
+	"gorm.io/plugin/opentelemetry/tracing"
+	"gorm.io/plugin/prometheus"
 )
 
 func InitDB(l logger.LoggerV1) *gorm.DB {
@@ -21,15 +24,55 @@ func InitDB(l logger.LoggerV1) *gorm.DB {
 		panic(err)
 	}
 	db, err := gorm.Open(mysql.Open(cfg.DSN), &gorm.Config{
-		Logger: glogger.New(goormLoggerFunc(l.Debug), glogger.Config{
-			// 慢查询
-			SlowThreshold: 0,
-			LogLevel:      glogger.Info,
-		}),
+		//Logger: glogger.New(goormLoggerFunc(l.Debug), glogger.Config{
+		//	// 慢查询
+		//	SlowThreshold: 0,
+		//	LogLevel:      glogger.Info,
+		//}),
 	})
 	if err != nil {
 		panic(err)
 	}
+	err = db.Use(prometheus.New(prometheus.Config{
+		DBName:          "webook",
+		RefreshInterval: 15,
+		MetricsCollector: []prometheus.MetricsCollector{
+			&prometheus.MySQL{
+				VariableNames: []string{"thread_running"},
+			},
+		},
+	}))
+	if err != nil {
+		panic(err)
+	}
+	cb := gormx.NewCallbacks(prometheus2.SummaryOpts{
+		Namespace: "geektime_daming",
+		Subsystem: "webook",
+		Name:      "gorm_db",
+		Help:      "统计 GORM 的数据库查询",
+		ConstLabels: map[string]string{
+			"instance_id": "my_instance",
+		},
+		Objectives: map[float64]float64{
+			0.5:   0.01,
+			0.75:  0.01,
+			0.9:   0.01,
+			0.99:  0.001,
+			0.999: 0.0001,
+		},
+	})
+
+	err = db.Use(cb)
+	if err != nil {
+		panic(err)
+	}
+
+	err = db.Use(tracing.NewPlugin(tracing.WithoutMetrics(),
+		tracing.WithDBName("webook")))
+	if err != nil {
+		panic(err)
+	}
+
 	err = dao.InitTables(db)
 	if err != nil {
 		panic(err)
diff --git a/webook/ioc/kafka.go b/webook/ioc/kafka.go
new file mode 100644
index 0000000..6c361c2
--- /dev/null
+++ b/webook/ioc/kafka.go
@@ -0,0 +1,38 @@
+package ioc
+
+import (
+	"gitee.com/geekbang/basic-go/webook/internal/events"
+	"gitee.com/geekbang/basic-go/webook/internal/events/article"
+	"github.com/IBM/sarama"
+	"github.com/spf13/viper"
+)
+
+func InitSaramaClient() sarama.Client {
+	type Config struct {
+		Addr []string `yaml:"addr"`
+	}
+	var cfg Config
+	err := viper.UnmarshalKey("kafka", &cfg)
+	if err != nil {
+		panic(err)
+	}
+	scfg := sarama.NewConfig()
+	scfg.Producer.Return.Successes = true
+	client, err := sarama.NewClient(cfg.Addr, scfg)
+	if err != nil {
+		panic(err)
+	}
+	return client
+}
+
+func InitSyncProducer(c sarama.Client) sarama.SyncProducer {
+	p, err := sarama.NewSyncProducerFromClient(c)
+	if err != nil {
+		panic(err)
+	}
+	return p
+}
+
+func InitConsumers(c1 *article.InteractiveReadEventConsumer) []events.Consumer {
+	return []events.Consumer{c1}
+}
diff --git a/webook/ioc/otel.go b/webook/ioc/otel.go
new file mode 100644
index 0000000..7a53c0b
--- /dev/null
+++ b/webook/ioc/otel.go
@@ -0,0 +1,65 @@
+package ioc
+
+import (
+	"context"
+	"go.opentelemetry.io/otel"
+	"go.opentelemetry.io/otel/exporters/zipkin"
+	"go.opentelemetry.io/otel/propagation"
+	"go.opentelemetry.io/otel/sdk/resource"
+	"go.opentelemetry.io/otel/sdk/trace"
+	semconv "go.opentelemetry.io/otel/semconv/v1.21.0"
+	"time"
+)
+
+// InitOTEL 返回一个关闭函数，并且让调用者关闭的时候来决定这个 ctx
+func InitOTEL() func(ctx context.Context) {
+	res, err := newResource("webook", "v0.0.1")
+	if err != nil {
+		panic(err)
+	}
+	prop := newPropagator()
+	// 在客户端和服务端之间传递 tracing 的相关信息
+	otel.SetTextMapPropagator(prop)
+
+	// 初始化 trace provider
+	// 这个 provider 就是用来在打点的时候构建 trace 的
+	tp, err := newTraceProvider(res)
+	if err != nil {
+		panic(err)
+	}
+	otel.SetTracerProvider(tp)
+	return func(ctx context.Context) {
+		_ = tp.Shutdown(ctx)
+	}
+}
+
+func newResource(serviceName, serviceVersion string) (*resource.Resource, error) {
+	return resource.Merge(resource.Default(),
+		resource.NewWithAttributes(semconv.SchemaURL,
+			semconv.ServiceName(serviceName),
+			semconv.ServiceVersion(serviceVersion),
+		))
+}
+
+func newTraceProvider(res *resource.Resource) (*trace.TracerProvider, error) {
+	exporter, err := zipkin.New(
+		"http://localhost:9411/api/v2/spans")
+	if err != nil {
+		return nil, err
+	}
+
+	traceProvider := trace.NewTracerProvider(
+		trace.WithBatcher(exporter,
+			// Default is 5s. Set to 1s for demonstrative purposes.
+			trace.WithBatchTimeout(time.Second)),
+		trace.WithResource(res),
+	)
+	return traceProvider, nil
+}
+
+func newPropagator() propagation.TextMapPropagator {
+	return propagation.NewCompositeTextMapPropagator(
+		propagation.TraceContext{},
+		propagation.Baggage{},
+	)
+}
diff --git a/webook/ioc/web.go b/webook/ioc/web.go
index df2cac6..15c3bd4 100644
--- a/webook/ioc/web.go
+++ b/webook/ioc/web.go
@@ -1,16 +1,17 @@
 package ioc
 
 import (
-	"context"
 	"gitee.com/geekbang/basic-go/webook/internal/web"
 	ijwt "gitee.com/geekbang/basic-go/webook/internal/web/jwt"
 	"gitee.com/geekbang/basic-go/webook/internal/web/middleware"
-	"gitee.com/geekbang/basic-go/webook/pkg/ginx/middleware/ratelimit"
-	"gitee.com/geekbang/basic-go/webook/pkg/limiter"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx"
+	"gitee.com/geekbang/basic-go/webook/pkg/ginx/middleware/prometheus"
 	"gitee.com/geekbang/basic-go/webook/pkg/logger"
 	"github.com/gin-contrib/cors"
 	"github.com/gin-gonic/gin"
+	prometheus2 "github.com/prometheus/client_golang/prometheus"
 	"github.com/redis/go-redis/v9"
+	otelgin "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
 	"strings"
 	"time"
 )
@@ -39,6 +40,18 @@ func InitWebServer(mdls []gin.HandlerFunc,
 
 func InitGinMiddlewares(redisClient redis.Cmdable,
 	hdl ijwt.Handler, l logger.LoggerV1) []gin.HandlerFunc {
+	pb := &prometheus.Builder{
+		Namespace: "geektime_daming",
+		Subsystem: "webook",
+		Name:      "gin_http",
+		Help:      "统计 GIN 的HTTP接口数据",
+	}
+	ginx.InitCounter(prometheus2.CounterOpts{
+		Namespace: "geektime_daming",
+		Subsystem: "webook",
+		Name:      "biz_code",
+		Help:      "统计业务错误码",
+	})
 	return []gin.HandlerFunc{
 		cors.New(cors.Config{
 			//AllowAllOrigins: true,
@@ -62,10 +75,13 @@ func InitGinMiddlewares(redisClient redis.Cmdable,
 		func(ctx *gin.Context) {
 			println("这是我的 Middleware")
 		},
-		ratelimit.NewBuilder(limiter.NewRedisSlidingWindowLimiter(redisClient, time.Second, 1000)).Build(),
-		middleware.NewLogMiddlewareBuilder(func(ctx context.Context, al middleware.AccessLog) {
-			l.Debug("", logger.Field{Key: "req", Val: al})
-		}).AllowReqBody().AllowRespBody().Build(),
+		pb.BuildResponseTime(),
+		pb.BuildActiveRequest(),
+		otelgin.Middleware("webook"),
+		//ratelimit.NewBuilder(limiter.NewRedisSlidingWindowLimiter(redisClient, time.Second, 1000)).Build(),
+		//middleware.NewLogMiddlewareBuilder(func(ctx context.Context, al middleware.AccessLog) {
+		//	l.Debug("", logger.Field{Key: "req", Val: al})
+		//}).AllowReqBody().AllowRespBody().Build(),
 		middleware.NewLoginJWTMiddlewareBuilder(hdl).CheckLogin(),
 	}
 }
diff --git a/webook/main.go b/webook/main.go
index 6211fba..382b4a8 100644
--- a/webook/main.go
+++ b/webook/main.go
@@ -2,20 +2,38 @@ package main
 
 import (
 	"bytes"
+	"context"
+	"gitee.com/geekbang/basic-go/webook/ioc"
 	"github.com/fsnotify/fsnotify"
 	"github.com/gin-gonic/gin"
+	"github.com/prometheus/client_golang/prometheus/promhttp"
 	"github.com/spf13/pflag"
 	"github.com/spf13/viper"
 	_ "github.com/spf13/viper/remote"
 	"go.uber.org/zap"
 	"log"
 	"net/http"
+	"time"
 )
 
 func main() {
 	initViperV1()
 	initLogger()
-	server := InitWebServer()
+	tpCancel := ioc.InitOTEL()
+	defer func() {
+		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+		defer cancel()
+		tpCancel(ctx)
+	}()
+	app := InitWebServer()
+	initPrometheus()
+	for _, c := range app.consumers {
+		err := c.Start()
+		if err != nil {
+			panic(err)
+		}
+	}
+	server := app.server
 	server.GET("/hello", func(ctx *gin.Context) {
 		ctx.String(http.StatusOK, "hello，启动成功了！")
 	})
@@ -24,6 +42,15 @@ func main() {
 	//server.Run(":8081")
 	//server.Run(addr)
 	server.Run(":8080")
+
+}
+
+func initPrometheus() {
+	go func() {
+		// 专门给 prometheus 用的端口
+		http.Handle("/metrics", promhttp.Handler())
+		http.ListenAndServe(":8081", nil)
+	}()
 }
 
 func initLogger() {
diff --git a/webook/pkg/ginx/middleware/prometheus/prometheus.go b/webook/pkg/ginx/middleware/prometheus/prometheus.go
new file mode 100644
index 0000000..eb5906e
--- /dev/null
+++ b/webook/pkg/ginx/middleware/prometheus/prometheus.go
@@ -0,0 +1,71 @@
+package prometheus
+
+import (
+	"github.com/gin-gonic/gin"
+	"github.com/prometheus/client_golang/prometheus"
+	"strconv"
+	"time"
+)
+
+type Builder struct {
+	Namespace  string
+	Subsystem  string
+	Name       string
+	InstanceId string
+	Help       string
+}
+
+func (b *Builder) BuildResponseTime() gin.HandlerFunc {
+	// pattern 是指命中的路由
+	labels := []string{"method", "pattern", "status"}
+	vector := prometheus.NewSummaryVec(prometheus.SummaryOpts{
+		Namespace: b.Namespace,
+		Subsystem: b.Subsystem,
+		Help:      b.Help,
+		// Namespace 和 Subsystem 和 Name 都不能有 _ 以外的其它符号
+		Name: b.Name + "_resp_time",
+		ConstLabels: map[string]string{
+			"instance_id": b.InstanceId,
+		},
+		Objectives: map[float64]float64{
+			0.5:   0.01,
+			0.75:  0.01,
+			0.9:   0.01,
+			0.99:  0.001,
+			0.999: 0.0001,
+		},
+	}, labels)
+	prometheus.MustRegister(vector)
+	return func(ctx *gin.Context) {
+		start := time.Now()
+		defer func() {
+			// 准备上报 prometheus
+			duration := time.Since(start).Milliseconds()
+			method := ctx.Request.Method
+			pattern := ctx.FullPath()
+			status := ctx.Writer.Status()
+			vector.WithLabelValues(method, pattern, strconv.Itoa(status)).
+				Observe(float64(duration))
+		}()
+		ctx.Next()
+	}
+}
+
+func (b *Builder) BuildActiveRequest() gin.HandlerFunc {
+	gauge := prometheus.NewGauge(prometheus.GaugeOpts{
+		Namespace: b.Namespace,
+		Subsystem: b.Subsystem,
+		Help:      b.Help,
+		// Namespace 和 Subsystem 和 Name 都不能有 _ 以外的其它符号
+		Name: b.Name + "_active_req",
+		ConstLabels: map[string]string{
+			"instance_id": b.InstanceId,
+		},
+	})
+	prometheus.MustRegister(gauge)
+	return func(ctx *gin.Context) {
+		gauge.Inc()
+		defer gauge.Dec()
+		ctx.Next()
+	}
+}
diff --git a/webook/internal/web/result.go b/webook/pkg/ginx/result.go
similarity index 88%
rename from webook/internal/web/result.go
rename to webook/pkg/ginx/result.go
index 0feb82d..cf9b2e8 100644
--- a/webook/internal/web/result.go
+++ b/webook/pkg/ginx/result.go
@@ -1,4 +1,4 @@
-package web
+package ginx
 
 type Result struct {
 	Code int    `json:"code"`
diff --git a/webook/pkg/ginx/wrapper_func.go b/webook/pkg/ginx/wrapper_func.go
new file mode 100644
index 0000000..1f906c8
--- /dev/null
+++ b/webook/pkg/ginx/wrapper_func.go
@@ -0,0 +1,91 @@
+package ginx
+
+import (
+	"gitee.com/geekbang/basic-go/webook/pkg/logger"
+	"github.com/gin-gonic/gin"
+	"github.com/golang-jwt/jwt/v5"
+	"github.com/prometheus/client_golang/prometheus"
+	"net/http"
+	"strconv"
+)
+
+var L logger.LoggerV1 = logger.NewNopLogger()
+
+var vector *prometheus.CounterVec
+
+func InitCounter(opt prometheus.CounterOpts) {
+	vector = prometheus.NewCounterVec(opt, []string{"code"})
+	prometheus.MustRegister(vector)
+}
+
+// WrapBodyAndClaims bizFn 就是你的业务逻辑
+func WrapBodyAndClaims[Req any, Claims jwt.Claims](
+	bizFn func(ctx *gin.Context, req Req, uc Claims) (Result, error),
+) gin.HandlerFunc {
+	return func(ctx *gin.Context) {
+		var req Req
+		if err := ctx.Bind(&req); err != nil {
+			L.Error("输入错误", logger.Error(err))
+			return
+		}
+		L.Debug("输入参数", logger.Field{Key: "req", Val: req})
+		val, ok := ctx.Get("user")
+		if !ok {
+			ctx.AbortWithStatus(http.StatusUnauthorized)
+			return
+		}
+		uc, ok := val.(Claims)
+		if !ok {
+			ctx.AbortWithStatus(http.StatusUnauthorized)
+			return
+		}
+		res, err := bizFn(ctx, req, uc)
+		vector.WithLabelValues(strconv.Itoa(res.Code)).Inc()
+		if err != nil {
+			L.Error("执行业务逻辑失败", logger.Error(err))
+		}
+		ctx.JSON(http.StatusOK, res)
+	}
+}
+
+func WrapBody[Req any](
+	bizFn func(ctx *gin.Context, req Req) (Result, error),
+) gin.HandlerFunc {
+	return func(ctx *gin.Context) {
+		var req Req
+		if err := ctx.Bind(&req); err != nil {
+			L.Error("输入错误", logger.Error(err))
+			return
+		}
+		L.Debug("输入参数", logger.Field{Key: "req", Val: req})
+		res, err := bizFn(ctx, req)
+		vector.WithLabelValues(strconv.Itoa(res.Code)).Inc()
+		if err != nil {
+			L.Error("执行业务逻辑失败", logger.Error(err))
+		}
+		ctx.JSON(http.StatusOK, res)
+	}
+}
+
+func WrapClaims[Claims any](
+	bizFn func(ctx *gin.Context, uc Claims) (Result, error),
+) gin.HandlerFunc {
+	return func(ctx *gin.Context) {
+		val, ok := ctx.Get("user")
+		if !ok {
+			ctx.AbortWithStatus(http.StatusUnauthorized)
+			return
+		}
+		uc, ok := val.(Claims)
+		if !ok {
+			ctx.AbortWithStatus(http.StatusUnauthorized)
+			return
+		}
+		res, err := bizFn(ctx, uc)
+		vector.WithLabelValues(strconv.Itoa(res.Code)).Inc()
+		if err != nil {
+			L.Error("执行业务逻辑失败", logger.Error(err))
+		}
+		ctx.JSON(http.StatusOK, res)
+	}
+}
diff --git a/webook/pkg/gormx/prometheus.go b/webook/pkg/gormx/prometheus.go
new file mode 100644
index 0000000..a77c8c4
--- /dev/null
+++ b/webook/pkg/gormx/prometheus.go
@@ -0,0 +1,115 @@
+package gormx
+
+import (
+	"github.com/prometheus/client_golang/prometheus"
+	"gorm.io/gorm"
+	"time"
+)
+
+type Callbacks struct {
+	vector *prometheus.SummaryVec
+}
+
+func (c *Callbacks) Name() string {
+	return "prometheus"
+}
+
+func (c *Callbacks) Initialize(db *gorm.DB) error {
+	err := db.Callback().Create().Before("*").
+		Register("prometheus_create_before", c.Before())
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Create().After("*").
+		Register("prometheus_create_after", c.After("CREATE"))
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Query().Before("*").
+		Register("prometheus_query_before", c.Before())
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Query().After("*").
+		Register("prometheus_query_after", c.After("QUERY"))
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Query().Before("*").
+		Register("prometheus_raw_before", c.Before())
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Raw().After("*").
+		Register("prometheus_raw_after", c.After("RAW"))
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Update().Before("*").
+		Register("prometheus_update_before", c.Before())
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Update().After("*").
+		Register("prometheus_update_after", c.After("UPDATE"))
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Delete().Before("*").
+		Register("prometheus_delete_before", c.Before())
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Update().After("*").
+		Register("prometheus_delete_after", c.After("DELETE"))
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Row().Before("*").
+		Register("prometheus_row_before", c.Before())
+	if err != nil {
+		return err
+	}
+
+	err = db.Callback().Update().After("*").
+		Register("prometheus_row_after", c.After("ROW"))
+	return err
+}
+
+func NewCallbacks(opts prometheus.SummaryOpts) *Callbacks {
+	vector := prometheus.NewSummaryVec(opts,
+		[]string{"type", "table"})
+	prometheus.MustRegister(vector)
+	return &Callbacks{
+		vector: vector,
+	}
+}
+
+func (c *Callbacks) Before() func(db *gorm.DB) {
+	return func(db *gorm.DB) {
+		start := time.Now()
+		db.Set("start_time", start)
+	}
+}
+
+func (c *Callbacks) After(typ string) func(db *gorm.DB) {
+	return func(db *gorm.DB) {
+		val, _ := db.Get("start_time")
+		start, ok := val.(time.Time)
+		if ok {
+			duration := time.Since(start).Milliseconds()
+			c.vector.WithLabelValues(typ, db.Statement.Table).
+				Observe(float64(duration))
+		}
+	}
+}
diff --git a/webook/pkg/logger/fields.go b/webook/pkg/logger/fields.go
index 16793a3..395c480 100644
--- a/webook/pkg/logger/fields.go
+++ b/webook/pkg/logger/fields.go
@@ -1,9 +1,22 @@
 package logger
 
+var DEBUG = false
+
 func Error(err error) Field {
 	return Field{Key: "error", Val: err}
 }
 
+func SafeString(l LoggerV1, key string, val string) Field {
+	//if l.Level() == "DEBUG"{
+	//
+	//}
+	if DEBUG {
+		return Field{Key: key, Val: val}
+	} else {
+		return Field{Key: key, Val: "****"}
+	}
+}
+
 func String(key string, val string) Field {
 	return Field{Key: key, Val: val}
 }
@@ -11,6 +24,9 @@ func String(key string, val string) Field {
 func Bool(key string, val bool) Field {
 	return Field{Key: key, Val: val}
 }
+func Int32(key string, val int32) Field {
+	return Field{Key: key, Val: val}
+}
 
 func Int64(key string, val int64) Field {
 	return Field{Key: key, Val: val}
diff --git a/webook/pkg/redisx/prometheus_hook.go b/webook/pkg/redisx/prometheus_hook.go
new file mode 100644
index 0000000..6c21617
--- /dev/null
+++ b/webook/pkg/redisx/prometheus_hook.go
@@ -0,0 +1,47 @@
+package redisx
+
+import (
+	"context"
+	"github.com/prometheus/client_golang/prometheus"
+	"github.com/redis/go-redis/v9"
+	"net"
+	"strconv"
+	"time"
+)
+
+type PrometheusHook struct {
+	vector *prometheus.SummaryVec
+}
+
+func NewPrometheusHook(opt prometheus.SummaryOpts) *PrometheusHook {
+	return &PrometheusHook{
+		vector: prometheus.NewSummaryVec(opt, []string{"cmd", "key_exist"}),
+	}
+}
+
+func (p *PrometheusHook) DialHook(next redis.DialHook) redis.DialHook {
+	return func(ctx context.Context, network, addr string) (net.Conn, error) {
+		return next(ctx, network, addr)
+	}
+}
+
+func (p *PrometheusHook) ProcessHook(next redis.ProcessHook) redis.ProcessHook {
+	return func(ctx context.Context, cmd redis.Cmder) error {
+		start := time.Now()
+		var err error
+		defer func() {
+			duration := time.Since(start).Milliseconds()
+			keyExists := err == redis.Nil
+			p.vector.WithLabelValues(cmd.Name(), strconv.FormatBool(keyExists)).
+				Observe(float64(duration))
+		}()
+		err = next(ctx, cmd)
+		return err
+	}
+}
+
+func (p *PrometheusHook) ProcessPipelineHook(next redis.ProcessPipelineHook) redis.ProcessPipelineHook {
+	return func(ctx context.Context, cmds []redis.Cmder) error {
+		return next(ctx, cmds)
+	}
+}
diff --git a/webook/pkg/samarax/batch_handler.go b/webook/pkg/samarax/batch_handler.go
new file mode 100644
index 0000000..1f1207a
--- /dev/null
+++ b/webook/pkg/samarax/batch_handler.go
@@ -0,0 +1,73 @@
+package samarax
+
+import (
+	"context"
+	"encoding/json"
+	"gitee.com/geekbang/basic-go/webook/pkg/logger"
+	"github.com/IBM/sarama"
+	"time"
+)
+
+type BatchHandler[T any] struct {
+	fn func(msgs []*sarama.ConsumerMessage, ts []T) error
+	l  logger.LoggerV1
+}
+
+func NewBatchHandler[T any](l logger.LoggerV1, fn func(msgs []*sarama.ConsumerMessage, ts []T) error) *BatchHandler[T] {
+	return &BatchHandler[T]{fn: fn, l: l}
+}
+
+func (b *BatchHandler[T]) Setup(session sarama.ConsumerGroupSession) error {
+	return nil
+}
+
+func (b *BatchHandler[T]) Cleanup(session sarama.ConsumerGroupSession) error {
+	return nil
+}
+
+func (b *BatchHandler[T]) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
+	msgs := claim.Messages()
+	const batchSize = 10
+	for {
+		batch := make([]*sarama.ConsumerMessage, 0, batchSize)
+		ts := make([]T, 0, batchSize)
+		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+		var done = false
+		for i := 0; i < batchSize && !done; i++ {
+			select {
+			case <-ctx.Done():
+				// 超时了
+				done = true
+			case msg, ok := <-msgs:
+				if !ok {
+					cancel()
+					return nil
+				}
+				batch = append(batch, msg)
+				var t T
+				err := json.Unmarshal(msg.Value, &t)
+				if err != nil {
+					b.l.Error("反序列消息体失败",
+						logger.String("topic", msg.Topic),
+						logger.Int32("partition", msg.Partition),
+						logger.Int64("offset", msg.Offset),
+						logger.Error(err))
+					continue
+				}
+				batch = append(batch, msg)
+				ts = append(ts, t)
+			}
+		}
+		cancel()
+		// 凑够了一批，然后你就处理
+		err := b.fn(batch, ts)
+		if err != nil {
+			b.l.Error("处理消息失败",
+				// 把真个 msgs 都记录下来
+				logger.Error(err))
+		}
+		for _, msg := range batch {
+			session.MarkMessage(msg, "")
+		}
+	}
+}
diff --git a/webook/pkg/samarax/handler.go b/webook/pkg/samarax/handler.go
new file mode 100644
index 0000000..644816d
--- /dev/null
+++ b/webook/pkg/samarax/handler.go
@@ -0,0 +1,51 @@
+package samarax
+
+import (
+	"encoding/json"
+	"gitee.com/geekbang/basic-go/webook/pkg/logger"
+	"github.com/IBM/sarama"
+)
+
+type Handler[T any] struct {
+	l  logger.LoggerV1
+	fn func(msg *sarama.ConsumerMessage, event T) error
+}
+
+func NewHandler[T any](l logger.LoggerV1, fn func(msg *sarama.ConsumerMessage, event T) error) *Handler[T] {
+	return &Handler[T]{l: l, fn: fn}
+}
+
+func (h *Handler[T]) Setup(session sarama.ConsumerGroupSession) error {
+	return nil
+}
+
+func (h *Handler[T]) Cleanup(session sarama.ConsumerGroupSession) error {
+	return nil
+}
+
+func (h *Handler[T]) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
+	msgs := claim.Messages()
+	for msg := range msgs {
+		// 在这里调用业务处理逻辑
+		var t T
+		err := json.Unmarshal(msg.Value, &t)
+		if err != nil {
+			// 你也可以在这里引入重试的逻辑
+			h.l.Error("反序列消息体失败",
+				logger.String("topic", msg.Topic),
+				logger.Int32("partition", msg.Partition),
+				logger.Int64("offset", msg.Offset),
+				logger.Error(err))
+		}
+		err = h.fn(msg, t)
+		if err != nil {
+			h.l.Error("处理消息失败",
+				logger.String("topic", msg.Topic),
+				logger.Int32("partition", msg.Partition),
+				logger.Int64("offset", msg.Offset),
+				logger.Error(err))
+		}
+		session.MarkMessage(msg, "")
+	}
+	return nil
+}
diff --git a/webook/prometheus.yaml b/webook/prometheus.yaml
new file mode 100644
index 0000000..c56022d
--- /dev/null
+++ b/webook/prometheus.yaml
@@ -0,0 +1,6 @@
+scrape_configs:
+  - job_name: "webook"
+    scrape_interval: 5s
+    scrape_timeout: 3s
+    static_configs:
+      - targets: ["host.docker.internal:8081"]
\ No newline at end of file
diff --git a/webook/wire.go b/webook/wire.go
index a103ef8..a7b7a73 100644
--- a/webook/wire.go
+++ b/webook/wire.go
@@ -3,6 +3,7 @@
 package main
 
 import (
+	"gitee.com/geekbang/basic-go/webook/internal/events/article"
 	"gitee.com/geekbang/basic-go/webook/internal/repository"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/cache"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/dao"
@@ -10,7 +11,6 @@ import (
 	"gitee.com/geekbang/basic-go/webook/internal/web"
 	ijwt "gitee.com/geekbang/basic-go/webook/internal/web/jwt"
 	"gitee.com/geekbang/basic-go/webook/ioc"
-	"github.com/gin-gonic/gin"
 	"github.com/google/wire"
 )
 
@@ -20,17 +20,23 @@ var interactiveSvcSet = wire.NewSet(dao.NewGORMInteractiveDAO,
 	service.NewInteractiveService,
 )
 
-func InitWebServer() *gin.Engine {
+func InitWebServer() *App {
 	wire.Build(
 		// 第三方依赖
 		ioc.InitRedis, ioc.InitDB,
 		ioc.InitLogger,
+		ioc.InitSaramaClient,
+		ioc.InitSyncProducer,
 		// DAO 部分
 		dao.NewUserDAO,
 		dao.NewArticleGORMDAO,
 
 		interactiveSvcSet,
 
+		article.NewSaramaSyncProducer,
+		article.NewInteractiveReadEventConsumer,
+		ioc.InitConsumers,
+
 		// cache 部分
 		cache.NewCodeCache, cache.NewUserCache,
 		cache.NewArticleRedisCache,
@@ -54,6 +60,8 @@ func InitWebServer() *gin.Engine {
 		web.NewOAuth2WechatHandler,
 		ioc.InitGinMiddlewares,
 		ioc.InitWebServer,
+
+		wire.Struct(new(App), "*"),
 	)
-	return gin.Default()
+	return new(App)
 }
diff --git a/webook/wire_gen.go b/webook/wire_gen.go
index 951c7d0..4a407fd 100644
--- a/webook/wire_gen.go
+++ b/webook/wire_gen.go
@@ -7,6 +7,7 @@
 package main
 
 import (
+	"gitee.com/geekbang/basic-go/webook/internal/events/article"
 	"gitee.com/geekbang/basic-go/webook/internal/repository"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/cache"
 	"gitee.com/geekbang/basic-go/webook/internal/repository/dao"
@@ -14,7 +15,6 @@ import (
 	"gitee.com/geekbang/basic-go/webook/internal/web"
 	"gitee.com/geekbang/basic-go/webook/internal/web/jwt"
 	"gitee.com/geekbang/basic-go/webook/ioc"
-	"github.com/gin-gonic/gin"
 	"github.com/google/wire"
 )
 
@@ -24,7 +24,7 @@ import (
 
 // Injectors from wire.go:
 
-func InitWebServer() *gin.Engine {
+func InitWebServer() *App {
 	cmdable := ioc.InitRedis()
 	handler := jwt.NewRedisJWTHandler(cmdable)
 	loggerV1 := ioc.InitLogger()
@@ -42,16 +42,25 @@ func InitWebServer() *gin.Engine {
 	articleDAO := dao.NewArticleGORMDAO(db)
 	articleCache := cache.NewArticleRedisCache(cmdable)
 	articleRepository := repository.NewCachedArticleRepository(articleDAO, userRepository, articleCache)
-	articleService := service.NewArticleService(articleRepository)
+	client := ioc.InitSaramaClient()
+	syncProducer := ioc.InitSyncProducer(client)
+	producer := article.NewSaramaSyncProducer(syncProducer)
+	articleService := service.NewArticleService(articleRepository, producer)
 	interactiveDAO := dao.NewGORMInteractiveDAO(db)
 	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
-	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
+	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, loggerV1, interactiveCache)
 	interactiveService := service.NewInteractiveService(interactiveRepository)
 	articleHandler := web.NewArticleHandler(loggerV1, articleService, interactiveService)
 	wechatService := ioc.InitWechatService(loggerV1)
 	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, handler, userService)
 	engine := ioc.InitWebServer(v, userHandler, articleHandler, oAuth2WechatHandler)
-	return engine
+	interactiveReadEventConsumer := article.NewInteractiveReadEventConsumer(interactiveRepository, client, loggerV1)
+	v2 := ioc.InitConsumers(interactiveReadEventConsumer)
+	app := &App{
+		server:    engine,
+		consumers: v2,
+	}
+	return app
 }
 
 // wire.go:
